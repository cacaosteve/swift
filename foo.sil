sil_stage canonical

import Builtin
import Swift
import SwiftShims

import StdlibUnittest

final class C<T> {
  @_hasStorage final var x: Int { get set }
  @_hasStorage @_hasInitialValue final var y: LifetimeTracked? { get set }
  @_hasStorage final var z: T { get set }
  @_hasStorage final let immutable: String { get }
  @_hasStorage private(set) final var secretlyMutable: String { get set }
  final var computed: T { get set }
  init(x: Int, y: LifetimeTracked?, z: T)
  deinit
}

struct Point : Equatable {
  @_hasStorage var x: Double { get set }
  @_hasStorage var y: Double { get set }
  @_hasStorage @_hasInitialValue var trackLifetime: LifetimeTracked { get set }
  @_hasStorage let hypotenuse: Double { get }
  @_hasStorage private(set) var secretlyMutableHypotenuse: Double { get set }
  init(x: Double, y: Double)
  static func == (a: Point, b: Point) -> Bool
}

struct S<T> : Equatable where T : Equatable {
  @_hasStorage var x: Int { get set }
  @_hasStorage @_hasInitialValue var y: LifetimeTracked? { get set }
  @_hasStorage var z: T { get set }
  @_hasStorage var p: Point { get set }
  @_hasStorage var c: C<T> { get set }
  static func == (a: S<T>, b: S<T>) -> Bool
  init(x: Int, y: LifetimeTracked? = nil, z: T, p: Point, c: C<T>)
}

final class ComputedA {
  final var readOnly: ComputedB { get }
  final var nonmutating: ComputedB { get set }
  @_hasStorage @_hasInitialValue final var reabstracted: () -> () { get set }
  deinit
  init()
}

struct ComputedB {
  var readOnly: ComputedA { get }
  var mutating: ComputedA { get set }
  var nonmutating: ComputedA { get nonmutating set }
  @_hasStorage @_hasInitialValue var reabstracted: () -> () { get set }
  init(reabstracted: @escaping () -> () = {})
  init()
}

typealias Tuple<T, U> = (S<T>, C<U>) where T : Equatable

func makeKeyPathInGenericContext<T>(of: T.Type) -> ReferenceWritableKeyPath<C<T>, T>

@_hasStorage @_hasInitialValue let path: ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> { get }

@_hasStorage @_hasInitialValue let z: LifetimeTracked { get }

@_hasStorage @_hasInitialValue let c: C<LifetimeTracked> { get }

@_hasStorage @_hasInitialValue let z2: LifetimeTracked { get }

@_hasStorage @_hasInitialValue let path2: ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> { get }

@_hasStorage @_hasInitialValue let pathNonGeneric: ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> { get }

@_hasStorage @_hasInitialValue let valuePath: KeyPath<C<LifetimeTracked>, Int> { get }

@_hasStorage @_hasInitialValue let valuePathNonGeneric: KeyPath<C<LifetimeTracked>, Int> { get }

// path
sil_global hidden [let] @$s3foo4paths24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>

// z
sil_global hidden [let] @$s3foo1z14StdlibUnittest15LifetimeTrackedCvp : $LifetimeTracked

// c
sil_global hidden [let] @$s3foo1cAA1CCy14StdlibUnittest15LifetimeTrackedCGvp : $C<LifetimeTracked>

// z2
sil_global hidden [let] @$s3foo2z214StdlibUnittest15LifetimeTrackedCvp : $LifetimeTracked

// path2
sil_global hidden [let] @$s3foo5path2s24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>

// pathNonGeneric
sil_global hidden [let] @$s3foo14pathNonGenerics24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>

// valuePath
sil_global hidden [let] @$s3foo9valuePaths03KeyC0CyAA1CCy14StdlibUnittest15LifetimeTrackedCGSiGvp : $KeyPath<C<LifetimeTracked>, Int>

// valuePathNonGeneric
sil_global hidden [let] @$s3foo19valuePathNonGenerics03KeyC0CyAA1CCy14StdlibUnittest15LifetimeTrackedCGSiGvp : $KeyPath<C<LifetimeTracked>, Int>

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s3foo4paths24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp // id: %2
  %3 = global_addr @$s3foo4paths24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %363, %319, %287, %241, %209, %116, %100, %41, %7
  %4 = metatype $@thick LifetimeTracked.Type      // user: %6
  // function_ref makeKeyPathInGenericContext<A>(of:)
  %5 = function_ref @$s3foo27makeKeyPathInGenericContext2ofs017ReferenceWritablecD0CyAA1CCyxGxGxm_tlF : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> @owned ReferenceWritableKeyPath<C<τ_0_0>, τ_0_0> // user: %6
  %6 = apply %5<LifetimeTracked>(%4) : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> @owned ReferenceWritableKeyPath<C<τ_0_0>, τ_0_0> // user: %7
  store %6 to %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %7
  alloc_global @$s3foo1z14StdlibUnittest15LifetimeTrackedCvp // id: %8
  %9 = global_addr @$s3foo1z14StdlibUnittest15LifetimeTrackedCvp : $*LifetimeTracked // users: %52, %31, %17
  %10 = metatype $@thick LifetimeTracked.Type     // user: %16
  %11 = integer_literal $Builtin.Int32, 456       // user: %12
  %12 = struct $Int (%11 : $Builtin.Int32)        // user: %16
  // function_ref default argument 1 of LifetimeTracked.init(_:identity:)
  %13 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfcfA0_ : $@convention(thin) () -> Int // user: %14
  %14 = apply %13() : $@convention(thin) () -> Int // user: %16
  // function_ref LifetimeTracked.__allocating_init(_:identity:)
  %15 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfC : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %16
  %16 = apply %15(%12, %14, %10) : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %17
  store %16 to %9 : $*LifetimeTracked             // id: %17
  alloc_global @$s3foo1cAA1CCy14StdlibUnittest15LifetimeTrackedCGvp // id: %18
  %19 = global_addr @$s3foo1cAA1CCy14StdlibUnittest15LifetimeTrackedCGvp : $*C<LifetimeTracked> // users: %369, %163, %114, %98, %39, %38
  %20 = metatype $@thick C<LifetimeTracked>.Type  // user: %36
  %21 = integer_literal $Builtin.Int32, 42        // user: %22
  %22 = struct $Int (%21 : $Builtin.Int32)        // user: %36
  %23 = metatype $@thick LifetimeTracked.Type     // user: %29
  %24 = integer_literal $Builtin.Int32, 123       // user: %25
  %25 = struct $Int (%24 : $Builtin.Int32)        // user: %29
  // function_ref default argument 1 of LifetimeTracked.init(_:identity:)
  %26 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfcfA0_ : $@convention(thin) () -> Int // user: %27
  %27 = apply %26() : $@convention(thin) () -> Int // user: %29
  // function_ref LifetimeTracked.__allocating_init(_:identity:)
  %28 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfC : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %29
  %29 = apply %28(%25, %27, %23) : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %30
  %30 = enum $Optional<LifetimeTracked>, #Optional.some!enumelt.1, %29 : $LifetimeTracked // user: %36
  %31 = load %9 : $*LifetimeTracked               // users: %34, %32
  strong_retain %31 : $LifetimeTracked            // id: %32
  %33 = alloc_stack $LifetimeTracked              // users: %34, %37, %36
  store %31 to %33 : $*LifetimeTracked            // id: %34
  // function_ref C.__allocating_init(x:y:z:)
  %35 = function_ref @$s3foo1CC1x1y1zACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxtcfC : $@convention(method) <τ_0_0> (Int, @owned Optional<LifetimeTracked>, @in τ_0_0, @thick C<τ_0_0>.Type) -> @owned C<τ_0_0> // user: %36
  %36 = apply %35<LifetimeTracked>(%22, %30, %33, %20) : $@convention(method) <τ_0_0> (Int, @owned Optional<LifetimeTracked>, @in τ_0_0, @thick C<τ_0_0>.Type) -> @owned C<τ_0_0> // user: %38
  dealloc_stack %33 : $*LifetimeTracked           // id: %37
  store %36 to %19 : $*C<LifetimeTracked>         // id: %38
  %39 = load %19 : $*C<LifetimeTracked>           // users: %45, %40
  strong_retain %39 : $C<LifetimeTracked>         // id: %40
  %41 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %43, %42
  strong_retain %41 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %42
  %43 = upcast %41 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> to $KeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %63, %48
  %44 = alloc_stack $C<LifetimeTracked>           // users: %45, %62, %61, %48
  store %39 to %44 : $*C<LifetimeTracked>         // id: %45
  // function_ref swift_getAtKeyPath
  %46 = function_ref @swift_getAtKeyPath : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed KeyPath<τ_0_0, τ_0_1>) -> @out τ_0_1 // user: %48
  %47 = alloc_stack $LifetimeTracked              // users: %49, %60, %48
  %48 = apply %46<C<LifetimeTracked>, LifetimeTracked>(%47, %44, %43) : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed KeyPath<τ_0_0, τ_0_1>) -> @out τ_0_1
  %49 = load %47 : $*LifetimeTracked              // user: %50
  %50 = init_existential_ref %49 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %51
  %51 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %50 : $AnyObject // users: %59, %57
  %52 = load %9 : $*LifetimeTracked               // users: %54, %53
  strong_retain %52 : $LifetimeTracked            // id: %53
  %54 = init_existential_ref %52 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %55
  %55 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %54 : $AnyObject // users: %58, %57
  // function_ref === infix(_:_:)
  %56 = function_ref @$ss3eeeoiySbyXlSg_ABtF : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %57
  %57 = apply %56(%51, %55) : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %82
  release_value %55 : $Optional<AnyObject>        // id: %58
  release_value %51 : $Optional<AnyObject>        // id: %59
  dealloc_stack %47 : $*LifetimeTracked           // id: %60
  destroy_addr %44 : $*C<LifetimeTracked>         // id: %61
  dealloc_stack %44 : $*C<LifetimeTracked>        // id: %62
  strong_release %43 : $KeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %63
  %64 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %69
  %65 = integer_literal $Builtin.Word, 60         // user: %69
  %66 = integer_literal $Builtin.Int1, -1         // user: %69
  %67 = metatype $@thin String.Type               // user: %69
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %68 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %69
  %69 = apply %68(%64, %65, %66, %67) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %87, %82
  %70 = integer_literal $Builtin.Int32, 466       // user: %71
  %71 = struct $UInt (%70 : $Builtin.Int32)       // user: %82
  // function_ref default argument 1 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %72 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_ : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String // user: %73
  %73 = apply %72() : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String // users: %86, %83, %75, %74
  strong_retain %73 : $@callee_guaranteed () -> @owned String // id: %74
  %75 = convert_escape_to_noescape %73 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %82
  // function_ref default argument 2 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %76 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA1_ : $@convention(thin) () -> @out SourceLocStack // user: %78
  %77 = alloc_stack $SourceLocStack               // users: %85, %84, %82, %78
  %78 = apply %76(%77) : $@convention(thin) () -> @out SourceLocStack
  // function_ref default argument 3 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %79 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA2_ : $@convention(thin) () -> Bool // user: %80
  %80 = apply %79() : $@convention(thin) () -> Bool // user: %82
  // function_ref expectTrue(_:_:stackTrace:showFrame:file:line:)
  %81 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutF : $@convention(thin) (Bool, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %82
  %82 = apply %81(%57, %75, %77, %80, %69, %71) : $@convention(thin) (Bool, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %73 : $@callee_guaranteed () -> @owned String // id: %83
  destroy_addr %77 : $*SourceLocStack             // id: %84
  dealloc_stack %77 : $*SourceLocStack            // id: %85
  strong_release %73 : $@callee_guaranteed () -> @owned String // id: %86
  release_value %69 : $String                     // id: %87
  alloc_global @$s3foo2z214StdlibUnittest15LifetimeTrackedCvp // id: %88
  %89 = global_addr @$s3foo2z214StdlibUnittest15LifetimeTrackedCvp : $*LifetimeTracked // users: %171, %127, %102, %97
  %90 = metatype $@thick LifetimeTracked.Type     // user: %96
  %91 = integer_literal $Builtin.Int32, 789       // user: %92
  %92 = struct $Int (%91 : $Builtin.Int32)        // user: %96
  // function_ref default argument 1 of LifetimeTracked.init(_:identity:)
  %93 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfcfA0_ : $@convention(thin) () -> Int // user: %94
  %94 = apply %93() : $@convention(thin) () -> Int // user: %96
  // function_ref LifetimeTracked.__allocating_init(_:identity:)
  %95 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfC : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %96
  %96 = apply %95(%92, %94, %90) : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %97
  store %96 to %89 : $*LifetimeTracked            // id: %97
  %98 = load %19 : $*C<LifetimeTracked>           // users: %105, %99
  strong_retain %98 : $C<LifetimeTracked>         // id: %99
  %100 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %113, %109, %101
  strong_retain %100 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %101
  %102 = load %89 : $*LifetimeTracked             // users: %107, %103
  strong_retain %102 : $LifetimeTracked           // id: %103
  %104 = alloc_stack $C<LifetimeTracked>          // users: %105, %112, %111, %109
  store %98 to %104 : $*C<LifetimeTracked>        // id: %105
  %106 = alloc_stack $LifetimeTracked             // users: %107, %110, %109
  store %102 to %106 : $*LifetimeTracked          // id: %107
  // function_ref swift_setAtReferenceWritableKeyPath
  %108 = function_ref @swift_setAtReferenceWritableKeyPath : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed ReferenceWritableKeyPath<τ_0_0, τ_0_1>, @in τ_0_1) -> () // user: %109
  %109 = apply %108<C<LifetimeTracked>, LifetimeTracked>(%104, %100, %106) : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed ReferenceWritableKeyPath<τ_0_0, τ_0_1>, @in τ_0_1) -> ()
  dealloc_stack %106 : $*LifetimeTracked          // id: %110
  destroy_addr %104 : $*C<LifetimeTracked>        // id: %111
  dealloc_stack %104 : $*C<LifetimeTracked>       // id: %112
  strong_release %100 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %113
  %114 = load %19 : $*C<LifetimeTracked>          // users: %120, %115
  strong_retain %114 : $C<LifetimeTracked>        // id: %115
  %116 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %118, %117
  strong_retain %116 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %117
  %118 = upcast %116 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> to $KeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %138, %123
  %119 = alloc_stack $C<LifetimeTracked>          // users: %120, %137, %136, %123
  store %114 to %119 : $*C<LifetimeTracked>       // id: %120
  // function_ref swift_getAtKeyPath
  %121 = function_ref @swift_getAtKeyPath : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed KeyPath<τ_0_0, τ_0_1>) -> @out τ_0_1 // user: %123
  %122 = alloc_stack $LifetimeTracked             // users: %124, %135, %123
  %123 = apply %121<C<LifetimeTracked>, LifetimeTracked>(%122, %119, %118) : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed KeyPath<τ_0_0, τ_0_1>) -> @out τ_0_1
  %124 = load %122 : $*LifetimeTracked            // user: %125
  %125 = init_existential_ref %124 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %126
  %126 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %125 : $AnyObject // users: %134, %132
  %127 = load %89 : $*LifetimeTracked             // users: %129, %128
  strong_retain %127 : $LifetimeTracked           // id: %128
  %129 = init_existential_ref %127 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %130
  %130 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %129 : $AnyObject // users: %133, %132
  // function_ref === infix(_:_:)
  %131 = function_ref @$ss3eeeoiySbyXlSg_ABtF : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %132
  %132 = apply %131(%126, %130) : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %157
  release_value %130 : $Optional<AnyObject>       // id: %133
  release_value %126 : $Optional<AnyObject>       // id: %134
  dealloc_stack %122 : $*LifetimeTracked          // id: %135
  destroy_addr %119 : $*C<LifetimeTracked>        // id: %136
  dealloc_stack %119 : $*C<LifetimeTracked>       // id: %137
  strong_release %118 : $KeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %138
  %139 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %144
  %140 = integer_literal $Builtin.Word, 60        // user: %144
  %141 = integer_literal $Builtin.Int1, -1        // user: %144
  %142 = metatype $@thin String.Type              // user: %144
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %143 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %144
  %144 = apply %143(%139, %140, %141, %142) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %162, %157
  %145 = integer_literal $Builtin.Int32, 470      // user: %146
  %146 = struct $UInt (%145 : $Builtin.Int32)     // user: %157
  // function_ref default argument 1 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %147 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_ : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String // user: %148
  %148 = apply %147() : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String // users: %161, %158, %150, %149
  strong_retain %148 : $@callee_guaranteed () -> @owned String // id: %149
  %150 = convert_escape_to_noescape %148 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %157
  // function_ref default argument 2 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %151 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA1_ : $@convention(thin) () -> @out SourceLocStack // user: %153
  %152 = alloc_stack $SourceLocStack              // users: %160, %159, %157, %153
  %153 = apply %151(%152) : $@convention(thin) () -> @out SourceLocStack
  // function_ref default argument 3 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %154 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA2_ : $@convention(thin) () -> Bool // user: %155
  %155 = apply %154() : $@convention(thin) () -> Bool // user: %157
  // function_ref expectTrue(_:_:stackTrace:showFrame:file:line:)
  %156 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutF : $@convention(thin) (Bool, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %157
  %157 = apply %156(%132, %150, %152, %155, %144, %146) : $@convention(thin) (Bool, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %148 : $@callee_guaranteed () -> @owned String // id: %158
  destroy_addr %152 : $*SourceLocStack            // id: %159
  dealloc_stack %152 : $*SourceLocStack           // id: %160
  strong_release %148 : $@callee_guaranteed () -> @owned String // id: %161
  release_value %144 : $String                    // id: %162
  %163 = load %19 : $*C<LifetimeTracked>          // user: %164
  %164 = ref_element_addr %163 : $C<LifetimeTracked>, #C.z // user: %165
  %165 = begin_access [read] [dynamic] %164 : $*LifetimeTracked // users: %166, %168
  %166 = load %165 : $*LifetimeTracked            // users: %169, %167
  strong_retain %166 : $LifetimeTracked           // id: %167
  end_access %165 : $*LifetimeTracked             // id: %168
  %169 = init_existential_ref %166 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %170
  %170 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %169 : $AnyObject // users: %178, %176
  %171 = load %89 : $*LifetimeTracked             // users: %173, %172
  strong_retain %171 : $LifetimeTracked           // id: %172
  %173 = init_existential_ref %171 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %174
  %174 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %173 : $AnyObject // users: %177, %176
  // function_ref === infix(_:_:)
  %175 = function_ref @$ss3eeeoiySbyXlSg_ABtF : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %176
  %176 = apply %175(%170, %174) : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %197
  release_value %174 : $Optional<AnyObject>       // id: %177
  release_value %170 : $Optional<AnyObject>       // id: %178
  %179 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %184
  %180 = integer_literal $Builtin.Word, 60        // user: %184
  %181 = integer_literal $Builtin.Int1, -1        // user: %184
  %182 = metatype $@thin String.Type              // user: %184
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %183 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %184
  %184 = apply %183(%179, %180, %181, %182) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %202, %197
  %185 = integer_literal $Builtin.Int32, 471      // user: %186
  %186 = struct $UInt (%185 : $Builtin.Int32)     // user: %197
  // function_ref default argument 1 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %187 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_ : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String // user: %188
  %188 = apply %187() : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String // users: %201, %198, %190, %189
  strong_retain %188 : $@callee_guaranteed () -> @owned String // id: %189
  %190 = convert_escape_to_noescape %188 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %197
  // function_ref default argument 2 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %191 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA1_ : $@convention(thin) () -> @out SourceLocStack // user: %193
  %192 = alloc_stack $SourceLocStack              // users: %200, %199, %197, %193
  %193 = apply %191(%192) : $@convention(thin) () -> @out SourceLocStack
  // function_ref default argument 3 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %194 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA2_ : $@convention(thin) () -> Bool // user: %195
  %195 = apply %194() : $@convention(thin) () -> Bool // user: %197
  // function_ref expectTrue(_:_:stackTrace:showFrame:file:line:)
  %196 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutF : $@convention(thin) (Bool, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %197
  %197 = apply %196(%176, %190, %192, %195, %184, %186) : $@convention(thin) (Bool, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %188 : $@callee_guaranteed () -> @owned String // id: %198
  destroy_addr %192 : $*SourceLocStack            // id: %199
  dealloc_stack %192 : $*SourceLocStack           // id: %200
  strong_release %188 : $@callee_guaranteed () -> @owned String // id: %201
  release_value %184 : $String                    // id: %202
  alloc_global @$s3foo5path2s24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp // id: %203
  %204 = global_addr @$s3foo5path2s24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %249, %212, %208
  %205 = metatype $@thick LifetimeTracked.Type    // user: %207
  // function_ref makeKeyPathInGenericContext<A>(of:)
  %206 = function_ref @$s3foo27makeKeyPathInGenericContext2ofs017ReferenceWritablecD0CyAA1CCyxGxGxm_tlF : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> @owned ReferenceWritableKeyPath<C<τ_0_0>, τ_0_0> // user: %207
  %207 = apply %206<LifetimeTracked>(%205) : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> @owned ReferenceWritableKeyPath<C<τ_0_0>, τ_0_0> // user: %208
  store %207 to %204 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %208
  %209 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // user: %211
  %210 = alloc_stack $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %211, %240, %233
  store %209 to %210 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %211
  %212 = load %204 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // user: %214
  %213 = alloc_stack $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %214, %239, %233
  store %212 to %213 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %214
  %215 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %220
  %216 = integer_literal $Builtin.Word, 60        // user: %220
  %217 = integer_literal $Builtin.Int1, -1        // user: %220
  %218 = metatype $@thin String.Type              // user: %220
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %219 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %220
  %220 = apply %219(%215, %216, %217, %218) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %238, %233
  %221 = integer_literal $Builtin.Int32, 475      // user: %222
  %222 = struct $UInt (%221 : $Builtin.Int32)     // user: %233
  // function_ref default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %223 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // user: %224
  %224 = apply %223<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // users: %237, %234, %226, %225
  strong_retain %224 : $@callee_guaranteed () -> @owned String // id: %225
  %226 = convert_escape_to_noescape %224 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %233
  // function_ref default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %227 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack // user: %229
  %228 = alloc_stack $SourceLocStack              // users: %236, %235, %233, %229
  %229 = apply %227<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>(%228) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack
  // function_ref default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %230 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %231
  %231 = apply %230<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %233
  // function_ref expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %232 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %233
  %233 = apply %232<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>(%210, %213, %226, %228, %231, %220, %222) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %224 : $@callee_guaranteed () -> @owned String // id: %234
  destroy_addr %228 : $*SourceLocStack            // id: %235
  dealloc_stack %228 : $*SourceLocStack           // id: %236
  strong_release %224 : $@callee_guaranteed () -> @owned String // id: %237
  release_value %220 : $String                    // id: %238
  dealloc_stack %213 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %239
  dealloc_stack %210 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %240
  %241 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %243, %242
  strong_retain %241 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %242
  %243 = upcast %241 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> to $AnyKeyPath // users: %246, %245
  // function_ref AnyKeyPath.hashValue.getter
  %244 = function_ref @$ss10AnyKeyPathC9hashValueSivg : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %245
  %245 = apply %244(%243) : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %248
  strong_release %243 : $AnyKeyPath               // id: %246
  %247 = alloc_stack $Int                         // users: %248, %282, %275
  store %245 to %247 : $*Int                      // id: %248
  %249 = load %204 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %251, %250
  strong_retain %249 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %250
  %251 = upcast %249 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> to $AnyKeyPath // users: %254, %253
  // function_ref AnyKeyPath.hashValue.getter
  %252 = function_ref @$ss10AnyKeyPathC9hashValueSivg : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %253
  %253 = apply %252(%251) : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %256
  strong_release %251 : $AnyKeyPath               // id: %254
  %255 = alloc_stack $Int                         // users: %256, %281, %275
  store %253 to %255 : $*Int                      // id: %256
  %257 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %262
  %258 = integer_literal $Builtin.Word, 60        // user: %262
  %259 = integer_literal $Builtin.Int1, -1        // user: %262
  %260 = metatype $@thin String.Type              // user: %262
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %261 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %262
  %262 = apply %261(%257, %258, %259, %260) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %280, %275
  %263 = integer_literal $Builtin.Int32, 476      // user: %264
  %264 = struct $UInt (%263 : $Builtin.Int32)     // user: %275
  // function_ref default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %265 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // user: %266
  %266 = apply %265<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // users: %279, %276, %268, %267
  strong_retain %266 : $@callee_guaranteed () -> @owned String // id: %267
  %268 = convert_escape_to_noescape %266 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %275
  // function_ref default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %269 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack // user: %271
  %270 = alloc_stack $SourceLocStack              // users: %278, %277, %275, %271
  %271 = apply %269<Int>(%270) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack
  // function_ref default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %272 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %273
  %273 = apply %272<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %275
  // function_ref expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %274 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %275
  %275 = apply %274<Int>(%247, %255, %268, %270, %273, %262, %264) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %266 : $@callee_guaranteed () -> @owned String // id: %276
  destroy_addr %270 : $*SourceLocStack            // id: %277
  dealloc_stack %270 : $*SourceLocStack           // id: %278
  strong_release %266 : $@callee_guaranteed () -> @owned String // id: %279
  release_value %262 : $String                    // id: %280
  dealloc_stack %255 : $*Int                      // id: %281
  dealloc_stack %247 : $*Int                      // id: %282
  alloc_global @$s3foo14pathNonGenerics24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp // id: %283
  %284 = global_addr @$s3foo14pathNonGenerics24ReferenceWritableKeyPathCyAA1CCy14StdlibUnittest15LifetimeTrackedCGAIGvp : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %417, %327, %290, %286
  %285 = keypath $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>, (root $C<LifetimeTracked>; settable_property $LifetimeTracked,  id @$s3foo1CC8computedxvg : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0, getter @$s3foo1CC8computedxvpACy14StdlibUnittest15LifetimeTrackedCGTK : $@convention(thin) (@in_guaranteed C<LifetimeTracked>, UnsafeRawPointer, @in_guaranteed C<LifetimeTracked>) -> @out LifetimeTracked, setter @$s3foo1CC8computedxvpACy14StdlibUnittest15LifetimeTrackedCGTk : $@convention(thin) (@in_guaranteed LifetimeTracked, @in_guaranteed C<LifetimeTracked>, UnsafeRawPointer, @in_guaranteed C<LifetimeTracked>) -> ()) // user: %286
  store %285 to %284 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %286
  %287 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // user: %289
  %288 = alloc_stack $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %289, %318, %311
  store %287 to %288 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %289
  %290 = load %284 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // user: %292
  %291 = alloc_stack $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %292, %317, %311
  store %290 to %291 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %292
  %293 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %298
  %294 = integer_literal $Builtin.Word, 60        // user: %298
  %295 = integer_literal $Builtin.Int1, -1        // user: %298
  %296 = metatype $@thin String.Type              // user: %298
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %297 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %298
  %298 = apply %297(%293, %294, %295, %296) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %316, %311
  %299 = integer_literal $Builtin.Int32, 479      // user: %300
  %300 = struct $UInt (%299 : $Builtin.Int32)     // user: %311
  // function_ref default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %301 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // user: %302
  %302 = apply %301<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // users: %315, %312, %304, %303
  strong_retain %302 : $@callee_guaranteed () -> @owned String // id: %303
  %304 = convert_escape_to_noescape %302 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %311
  // function_ref default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %305 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack // user: %307
  %306 = alloc_stack $SourceLocStack              // users: %314, %313, %311, %307
  %307 = apply %305<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>(%306) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack
  // function_ref default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %308 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %309
  %309 = apply %308<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %311
  // function_ref expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %310 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %311
  %311 = apply %310<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>>(%288, %291, %304, %306, %309, %298, %300) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %302 : $@callee_guaranteed () -> @owned String // id: %312
  destroy_addr %306 : $*SourceLocStack            // id: %313
  dealloc_stack %306 : $*SourceLocStack           // id: %314
  strong_release %302 : $@callee_guaranteed () -> @owned String // id: %315
  release_value %298 : $String                    // id: %316
  dealloc_stack %291 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %317
  dealloc_stack %288 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %318
  %319 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %321, %320
  strong_retain %319 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %320
  %321 = upcast %319 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> to $AnyKeyPath // users: %324, %323
  // function_ref AnyKeyPath.hashValue.getter
  %322 = function_ref @$ss10AnyKeyPathC9hashValueSivg : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %323
  %323 = apply %322(%321) : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %326
  strong_release %321 : $AnyKeyPath               // id: %324
  %325 = alloc_stack $Int                         // users: %326, %360, %353
  store %323 to %325 : $*Int                      // id: %326
  %327 = load %284 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // users: %329, %328
  strong_retain %327 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // id: %328
  %329 = upcast %327 : $ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> to $AnyKeyPath // users: %332, %331
  // function_ref AnyKeyPath.hashValue.getter
  %330 = function_ref @$ss10AnyKeyPathC9hashValueSivg : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %331
  %331 = apply %330(%329) : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %334
  strong_release %329 : $AnyKeyPath               // id: %332
  %333 = alloc_stack $Int                         // users: %334, %359, %353
  store %331 to %333 : $*Int                      // id: %334
  %335 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %340
  %336 = integer_literal $Builtin.Word, 60        // user: %340
  %337 = integer_literal $Builtin.Int1, -1        // user: %340
  %338 = metatype $@thin String.Type              // user: %340
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %339 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %340
  %340 = apply %339(%335, %336, %337, %338) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %358, %353
  %341 = integer_literal $Builtin.Int32, 480      // user: %342
  %342 = struct $UInt (%341 : $Builtin.Int32)     // user: %353
  // function_ref default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %343 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // user: %344
  %344 = apply %343<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // users: %357, %354, %346, %345
  strong_retain %344 : $@callee_guaranteed () -> @owned String // id: %345
  %346 = convert_escape_to_noescape %344 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %353
  // function_ref default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %347 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack // user: %349
  %348 = alloc_stack $SourceLocStack              // users: %356, %355, %353, %349
  %349 = apply %347<Int>(%348) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack
  // function_ref default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %350 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %351
  %351 = apply %350<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %353
  // function_ref expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %352 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %353
  %353 = apply %352<Int>(%325, %333, %346, %348, %351, %340, %342) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %344 : $@callee_guaranteed () -> @owned String // id: %354
  destroy_addr %348 : $*SourceLocStack            // id: %355
  dealloc_stack %348 : $*SourceLocStack           // id: %356
  strong_release %344 : $@callee_guaranteed () -> @owned String // id: %357
  release_value %340 : $String                    // id: %358
  dealloc_stack %333 : $*Int                      // id: %359
  dealloc_stack %325 : $*Int                      // id: %360
  alloc_global @$s3foo9valuePaths03KeyC0CyAA1CCy14StdlibUnittest15LifetimeTrackedCGSiGvp // id: %361
  %362 = global_addr @$s3foo9valuePaths03KeyC0CyAA1CCy14StdlibUnittest15LifetimeTrackedCGSiGvp : $*KeyPath<C<LifetimeTracked>, Int> // users: %455, %423, %371, %368
  %363 = load %3 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // user: %366
  %364 = keypath $KeyPath<LifetimeTracked, Int>, (root $LifetimeTracked; gettable_property $Int,  id @$s14StdlibUnittest15LifetimeTrackedC5valueSivg : $@convention(method) (@guaranteed LifetimeTracked) -> Int, getter @$s14StdlibUnittest15LifetimeTrackedC5valueSivpACTK : $@convention(thin) (@in_guaranteed LifetimeTracked, UnsafeRawPointer, @in_guaranteed LifetimeTracked) -> @out Int, external #LifetimeTracked.value) // users: %367, %366
  // function_ref _AppendKeyPath.appending<A, B, C>(path:)
  %365 = function_ref @$ss14_AppendKeyPathPsE9appending4paths0bC0Cyqd__qd_1_GAFyqd_0_qd_1_G_tAFyqd__qd_0_GRbzr1_lF : $@convention(method) <τ_0_0><τ_1_0, τ_1_1, τ_1_2 where τ_0_0 : KeyPath<τ_1_0, τ_1_1>> (@guaranteed KeyPath<τ_1_1, τ_1_2>, @guaranteed τ_0_0) -> @owned KeyPath<τ_1_0, τ_1_2> // user: %366
  %366 = apply %365<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>, C<LifetimeTracked>, LifetimeTracked, Int>(%364, %363) : $@convention(method) <τ_0_0><τ_1_0, τ_1_1, τ_1_2 where τ_0_0 : KeyPath<τ_1_0, τ_1_1>> (@guaranteed KeyPath<τ_1_1, τ_1_2>, @guaranteed τ_0_0) -> @owned KeyPath<τ_1_0, τ_1_2> // user: %368
  strong_release %364 : $KeyPath<LifetimeTracked, Int> // id: %367
  store %366 to %362 : $*KeyPath<C<LifetimeTracked>, Int> // id: %368
  %369 = load %19 : $*C<LifetimeTracked>          // users: %374, %370
  strong_retain %369 : $C<LifetimeTracked>        // id: %370
  %371 = load %362 : $*KeyPath<C<LifetimeTracked>, Int> // users: %414, %377, %372
  strong_retain %371 : $KeyPath<C<LifetimeTracked>, Int> // id: %372
  %373 = alloc_stack $C<LifetimeTracked>          // users: %374, %413, %412, %377
  store %369 to %373 : $*C<LifetimeTracked>       // id: %374
  // function_ref swift_getAtKeyPath
  %375 = function_ref @swift_getAtKeyPath : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed KeyPath<τ_0_0, τ_0_1>) -> @out τ_0_1 // user: %377
  %376 = alloc_stack $Int                         // users: %378, %411, %377
  %377 = apply %375<C<LifetimeTracked>, Int>(%376, %373, %371) : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed KeyPath<τ_0_0, τ_0_1>) -> @out τ_0_1
  %378 = load %376 : $*Int                        // user: %380
  %379 = alloc_stack $Int                         // users: %380, %410, %403
  store %378 to %379 : $*Int                      // id: %380
  %381 = integer_literal $Builtin.Int32, 789      // user: %382
  %382 = struct $Int (%381 : $Builtin.Int32)      // user: %384
  %383 = alloc_stack $Int                         // users: %384, %409, %403
  store %382 to %383 : $*Int                      // id: %384
  %385 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %390
  %386 = integer_literal $Builtin.Word, 60        // user: %390
  %387 = integer_literal $Builtin.Int1, -1        // user: %390
  %388 = metatype $@thin String.Type              // user: %390
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %389 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %390
  %390 = apply %389(%385, %386, %387, %388) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %408, %403
  %391 = integer_literal $Builtin.Int32, 484      // user: %392
  %392 = struct $UInt (%391 : $Builtin.Int32)     // user: %403
  // function_ref default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %393 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // user: %394
  %394 = apply %393<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // users: %407, %404, %396, %395
  strong_retain %394 : $@callee_guaranteed () -> @owned String // id: %395
  %396 = convert_escape_to_noescape %394 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %403
  // function_ref default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %397 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack // user: %399
  %398 = alloc_stack $SourceLocStack              // users: %406, %405, %403, %399
  %399 = apply %397<Int>(%398) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack
  // function_ref default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %400 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %401
  %401 = apply %400<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %403
  // function_ref expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %402 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %403
  %403 = apply %402<Int>(%379, %383, %396, %398, %401, %390, %392) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %394 : $@callee_guaranteed () -> @owned String // id: %404
  destroy_addr %398 : $*SourceLocStack            // id: %405
  dealloc_stack %398 : $*SourceLocStack           // id: %406
  strong_release %394 : $@callee_guaranteed () -> @owned String // id: %407
  release_value %390 : $String                    // id: %408
  dealloc_stack %383 : $*Int                      // id: %409
  dealloc_stack %379 : $*Int                      // id: %410
  dealloc_stack %376 : $*Int                      // id: %411
  destroy_addr %373 : $*C<LifetimeTracked>        // id: %412
  dealloc_stack %373 : $*C<LifetimeTracked>       // id: %413
  strong_release %371 : $KeyPath<C<LifetimeTracked>, Int> // id: %414
  alloc_global @$s3foo19valuePathNonGenerics03KeyC0CyAA1CCy14StdlibUnittest15LifetimeTrackedCGSiGvp // id: %415
  %416 = global_addr @$s3foo19valuePathNonGenerics03KeyC0CyAA1CCy14StdlibUnittest15LifetimeTrackedCGSiGvp : $*KeyPath<C<LifetimeTracked>, Int> // users: %463, %426, %422
  %417 = load %284 : $*ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked> // user: %420
  %418 = keypath $KeyPath<LifetimeTracked, Int>, (root $LifetimeTracked; gettable_property $Int,  id @$s14StdlibUnittest15LifetimeTrackedC5valueSivg : $@convention(method) (@guaranteed LifetimeTracked) -> Int, getter @$s14StdlibUnittest15LifetimeTrackedC5valueSivpACTK : $@convention(thin) (@in_guaranteed LifetimeTracked, UnsafeRawPointer, @in_guaranteed LifetimeTracked) -> @out Int, external #LifetimeTracked.value) // users: %421, %420
  // function_ref _AppendKeyPath.appending<A, B, C>(path:)
  %419 = function_ref @$ss14_AppendKeyPathPsE9appending4paths0bC0Cyqd__qd_1_GAFyqd_0_qd_1_G_tAFyqd__qd_0_GRbzr1_lF : $@convention(method) <τ_0_0><τ_1_0, τ_1_1, τ_1_2 where τ_0_0 : KeyPath<τ_1_0, τ_1_1>> (@guaranteed KeyPath<τ_1_1, τ_1_2>, @guaranteed τ_0_0) -> @owned KeyPath<τ_1_0, τ_1_2> // user: %420
  %420 = apply %419<ReferenceWritableKeyPath<C<LifetimeTracked>, LifetimeTracked>, C<LifetimeTracked>, LifetimeTracked, Int>(%418, %417) : $@convention(method) <τ_0_0><τ_1_0, τ_1_1, τ_1_2 where τ_0_0 : KeyPath<τ_1_0, τ_1_1>> (@guaranteed KeyPath<τ_1_1, τ_1_2>, @guaranteed τ_0_0) -> @owned KeyPath<τ_1_0, τ_1_2> // user: %422
  strong_release %418 : $KeyPath<LifetimeTracked, Int> // id: %421
  store %420 to %416 : $*KeyPath<C<LifetimeTracked>, Int> // id: %422
  %423 = load %362 : $*KeyPath<C<LifetimeTracked>, Int> // user: %425
  %424 = alloc_stack $KeyPath<C<LifetimeTracked>, Int> // users: %425, %454, %447
  store %423 to %424 : $*KeyPath<C<LifetimeTracked>, Int> // id: %425
  %426 = load %416 : $*KeyPath<C<LifetimeTracked>, Int> // user: %428
  %427 = alloc_stack $KeyPath<C<LifetimeTracked>, Int> // users: %428, %453, %447
  store %426 to %427 : $*KeyPath<C<LifetimeTracked>, Int> // id: %428
  %429 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %434
  %430 = integer_literal $Builtin.Word, 60        // user: %434
  %431 = integer_literal $Builtin.Int1, -1        // user: %434
  %432 = metatype $@thin String.Type              // user: %434
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %433 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %434
  %434 = apply %433(%429, %430, %431, %432) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %452, %447
  %435 = integer_literal $Builtin.Int32, 487      // user: %436
  %436 = struct $UInt (%435 : $Builtin.Int32)     // user: %447
  // function_ref default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %437 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // user: %438
  %438 = apply %437<KeyPath<C<LifetimeTracked>, Int>>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // users: %451, %448, %440, %439
  strong_retain %438 : $@callee_guaranteed () -> @owned String // id: %439
  %440 = convert_escape_to_noescape %438 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %447
  // function_ref default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %441 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack // user: %443
  %442 = alloc_stack $SourceLocStack              // users: %450, %449, %447, %443
  %443 = apply %441<KeyPath<C<LifetimeTracked>, Int>>(%442) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack
  // function_ref default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %444 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %445
  %445 = apply %444<KeyPath<C<LifetimeTracked>, Int>>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %447
  // function_ref expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %446 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %447
  %447 = apply %446<KeyPath<C<LifetimeTracked>, Int>>(%424, %427, %440, %442, %445, %434, %436) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %438 : $@callee_guaranteed () -> @owned String // id: %448
  destroy_addr %442 : $*SourceLocStack            // id: %449
  dealloc_stack %442 : $*SourceLocStack           // id: %450
  strong_release %438 : $@callee_guaranteed () -> @owned String // id: %451
  release_value %434 : $String                    // id: %452
  dealloc_stack %427 : $*KeyPath<C<LifetimeTracked>, Int> // id: %453
  dealloc_stack %424 : $*KeyPath<C<LifetimeTracked>, Int> // id: %454
  %455 = load %362 : $*KeyPath<C<LifetimeTracked>, Int> // users: %457, %456
  strong_retain %455 : $KeyPath<C<LifetimeTracked>, Int> // id: %456
  %457 = upcast %455 : $KeyPath<C<LifetimeTracked>, Int> to $AnyKeyPath // users: %460, %459
  // function_ref AnyKeyPath.hashValue.getter
  %458 = function_ref @$ss10AnyKeyPathC9hashValueSivg : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %459
  %459 = apply %458(%457) : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %462
  strong_release %457 : $AnyKeyPath               // id: %460
  %461 = alloc_stack $Int                         // users: %462, %496, %489
  store %459 to %461 : $*Int                      // id: %462
  %463 = load %416 : $*KeyPath<C<LifetimeTracked>, Int> // users: %465, %464
  strong_retain %463 : $KeyPath<C<LifetimeTracked>, Int> // id: %464
  %465 = upcast %463 : $KeyPath<C<LifetimeTracked>, Int> to $AnyKeyPath // users: %468, %467
  // function_ref AnyKeyPath.hashValue.getter
  %466 = function_ref @$ss10AnyKeyPathC9hashValueSivg : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %467
  %467 = apply %466(%465) : $@convention(method) (@guaranteed AnyKeyPath) -> Int // user: %470
  strong_release %465 : $AnyKeyPath               // id: %468
  %469 = alloc_stack $Int                         // users: %470, %495, %489
  store %467 to %469 : $*Int                      // id: %470
  %471 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %476
  %472 = integer_literal $Builtin.Word, 60        // user: %476
  %473 = integer_literal $Builtin.Int1, -1        // user: %476
  %474 = metatype $@thin String.Type              // user: %476
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %475 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %476
  %476 = apply %475(%471, %472, %473, %474) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %494, %489
  %477 = integer_literal $Builtin.Int32, 488      // user: %478
  %478 = struct $UInt (%477 : $Builtin.Int32)     // user: %489
  // function_ref default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %479 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // user: %480
  %480 = apply %479<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @owned @callee_guaranteed () -> @owned String // users: %493, %490, %482, %481
  strong_retain %480 : $@callee_guaranteed () -> @owned String // id: %481
  %482 = convert_escape_to_noescape %480 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %489
  // function_ref default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %483 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack // user: %485
  %484 = alloc_stack $SourceLocStack              // users: %492, %491, %489, %485
  %485 = apply %483<Int>(%484) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> @out SourceLocStack
  // function_ref default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %486 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %487
  %487 = apply %486<Int>() : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> () -> Bool // user: %489
  // function_ref expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %488 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> () // user: %489
  %489 = apply %488<Int>(%461, %469, %482, %484, %487, %476, %478) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()
  strong_release %480 : $@callee_guaranteed () -> @owned String // id: %490
  destroy_addr %484 : $*SourceLocStack            // id: %491
  dealloc_stack %484 : $*SourceLocStack           // id: %492
  strong_release %480 : $@callee_guaranteed () -> @owned String // id: %493
  release_value %476 : $String                    // id: %494
  dealloc_stack %469 : $*Int                      // id: %495
  dealloc_stack %461 : $*Int                      // id: %496
  %497 = integer_literal $Builtin.Int32, 0        // user: %498
  %498 = struct $Int32 (%497 : $Builtin.Int32)    // user: %499
  return %498 : $Int32                            // id: %499
} // end sil function 'main'

// C.x.getter
sil hidden [transparent] @$s3foo1CC1xSivg : $@convention(method) <T> (@guaranteed C<T>) -> Int {
// %0                                             // users: %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.x          // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Int   // users: %4, %5
  %4 = load %3 : $*Int                            // user: %6
  end_access %3 : $*Int                           // id: %5
  return %4 : $Int                                // id: %6
} // end sil function '$s3foo1CC1xSivg'

// C.x.setter
sil hidden [transparent] @$s3foo1CC1xSivs : $@convention(method) <T> (Int, @guaranteed C<T>) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Int, %1 : $C<T>):
  debug_value %0 : $Int, let, name "value", argno 1 // id: %2
  debug_value %1 : $C<T>, let, name "self", argno 2 // id: %3
  %4 = ref_element_addr %1 : $C<T>, #C.x          // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Int // users: %6, %7
  store %0 to %5 : $*Int                          // id: %6
  end_access %5 : $*Int                           // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s3foo1CC1xSivs'

// C.x.modify
sil hidden [transparent] @$s3foo1CC1xSivM : $@yield_once @convention(method) <T> (@guaranteed C<T>) -> @yields @inout Int {
// %0                                             // users: %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.x          // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Int // users: %5, %8, %4
  yield %3 : $*Int, resume bb1, unwind bb2        // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Int                           // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Int                           // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1CC1xSivM'

// variable initialization expression of C.y
sil hidden [transparent] @$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvpfi : $@convention(thin) <T> () -> @owned Optional<LifetimeTracked> {
bb0:
  %0 = enum $Optional<LifetimeTracked>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<LifetimeTracked>          // id: %1
} // end sil function '$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvpfi'

// C.y.getter
sil hidden [transparent] @$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvg : $@convention(method) <T> (@guaranteed C<T>) -> @owned Optional<LifetimeTracked> {
// %0                                             // users: %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.y          // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<LifetimeTracked> // users: %4, %6
  %4 = load %3 : $*Optional<LifetimeTracked>      // users: %7, %5
  retain_value %4 : $Optional<LifetimeTracked>    // id: %5
  end_access %3 : $*Optional<LifetimeTracked>     // id: %6
  return %4 : $Optional<LifetimeTracked>          // id: %7
} // end sil function '$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvg'

// C.y.setter
sil hidden [transparent] @$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvs : $@convention(method) <T> (@owned Optional<LifetimeTracked>, @guaranteed C<T>) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $Optional<LifetimeTracked>, %1 : $C<T>):
  debug_value %0 : $Optional<LifetimeTracked>, let, name "value", argno 1 // id: %2
  debug_value %1 : $C<T>, let, name "self", argno 2 // id: %3
  retain_value %0 : $Optional<LifetimeTracked>    // id: %4
  %5 = ref_element_addr %1 : $C<T>, #C.y          // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<LifetimeTracked> // users: %8, %7, %10
  %7 = load %6 : $*Optional<LifetimeTracked>      // user: %9
  store %0 to %6 : $*Optional<LifetimeTracked>    // id: %8
  release_value %7 : $Optional<LifetimeTracked>   // id: %9
  end_access %6 : $*Optional<LifetimeTracked>     // id: %10
  release_value %0 : $Optional<LifetimeTracked>   // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvs'

// C.y.modify
sil hidden [transparent] @$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvM : $@yield_once @convention(method) <T> (@guaranteed C<T>) -> @yields @inout Optional<LifetimeTracked> {
// %0                                             // users: %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.y          // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Optional<LifetimeTracked> // users: %5, %8, %4
  yield %3 : $*Optional<LifetimeTracked>, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Optional<LifetimeTracked>     // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Optional<LifetimeTracked>     // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1CC1y14StdlibUnittest15LifetimeTrackedCSgvM'

// C.z.getter
sil hidden [transparent] @$s3foo1CC1zxvg : $@convention(method) <T> (@guaranteed C<T>) -> @out T {
// %0                                             // user: %5
// %1                                             // users: %3, %2
bb0(%0 : $*T, %1 : $C<T>):
  debug_value %1 : $C<T>, let, name "self", argno 1 // id: %2
  %3 = ref_element_addr %1 : $C<T>, #C.z          // user: %4
  %4 = begin_access [read] [dynamic] %3 : $*T     // users: %6, %5
  copy_addr %4 to [initialization] %0 : $*T       // id: %5
  end_access %4 : $*T                             // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$s3foo1CC1zxvg'

// C.z.setter
sil hidden [transparent] @$s3foo1CC1zxvs : $@convention(method) <T> (@in T, @guaranteed C<T>) -> () {
// %0                                             // users: %11, %5, %2
// %1                                             // users: %6, %3
bb0(%0 : $*T, %1 : $C<T>):
  debug_value_addr %0 : $*T, let, name "value", argno 1 // id: %2
  debug_value %1 : $C<T>, let, name "self", argno 2 // id: %3
  %4 = alloc_stack $T                             // users: %10, %8, %5
  copy_addr %0 to [initialization] %4 : $*T       // id: %5
  %6 = ref_element_addr %1 : $C<T>, #C.z          // user: %7
  %7 = begin_access [modify] [dynamic] %6 : $*T   // users: %9, %8
  copy_addr [take] %4 to %7 : $*T                 // id: %8
  end_access %7 : $*T                             // id: %9
  dealloc_stack %4 : $*T                          // id: %10
  destroy_addr %0 : $*T                           // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1CC1zxvs'

// C.z.modify
sil hidden [transparent] @$s3foo1CC1zxvM : $@yield_once @convention(method) <T> (@guaranteed C<T>) -> @yields @inout T {
// %0                                             // users: %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.z          // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*T   // users: %5, %8, %4
  yield %3 : $*T, resume bb1, unwind bb2          // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*T                             // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*T                             // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1CC1zxvM'

// C.immutable.getter
sil hidden [transparent] @$s3foo1CC9immutableSSvg : $@convention(method) <T> (@guaranteed C<T>) -> @owned String {
// %0                                             // users: %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.immutable  // user: %3
  %3 = load %2 : $*String                         // users: %5, %4
  retain_value %3 : $String                       // id: %4
  return %3 : $String                             // id: %5
} // end sil function '$s3foo1CC9immutableSSvg'

// C.secretlyMutable.getter
sil hidden [transparent] @$s3foo1CC15secretlyMutableSSvg : $@convention(method) <T> (@guaranteed C<T>) -> @owned String {
// %0                                             // users: %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.secretlyMutable // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*String // users: %4, %6
  %4 = load %3 : $*String                         // users: %7, %5
  retain_value %4 : $String                       // id: %5
  end_access %3 : $*String                        // id: %6
  return %4 : $String                             // id: %7
} // end sil function '$s3foo1CC15secretlyMutableSSvg'

// C.secretlyMutable.setter
sil hidden [transparent] @$s3foo1CC15secretlyMutableSSvs : $@convention(method) <T> (@owned String, @guaranteed C<T>) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $String, %1 : $C<T>):
  debug_value %0 : $String, let, name "value", argno 1 // id: %2
  debug_value %1 : $C<T>, let, name "self", argno 2 // id: %3
  retain_value %0 : $String                       // id: %4
  %5 = ref_element_addr %1 : $C<T>, #C.secretlyMutable // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*String // users: %8, %7, %10
  %7 = load %6 : $*String                         // user: %9
  store %0 to %6 : $*String                       // id: %8
  release_value %7 : $String                      // id: %9
  end_access %6 : $*String                        // id: %10
  release_value %0 : $String                      // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1CC15secretlyMutableSSvs'

// C.computed.getter
sil hidden @$s3foo1CC8computedxvg : $@convention(method) <T> (@guaranteed C<T>) -> @out T {
// %0                                             // user: %5
// %1                                             // users: %3, %2
bb0(%0 : $*T, %1 : $C<T>):
  debug_value %1 : $C<T>, let, name "self", argno 1 // id: %2
  %3 = ref_element_addr %1 : $C<T>, #C.z          // user: %4
  %4 = begin_access [read] [dynamic] %3 : $*T     // users: %6, %5
  copy_addr %4 to [initialization] %0 : $*T       // id: %5
  end_access %4 : $*T                             // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$s3foo1CC8computedxvg'

// C.computed.setter
sil hidden @$s3foo1CC8computedxvs : $@convention(method) <T> (@in T, @guaranteed C<T>) -> () {
// %0                                             // users: %11, %5, %2
// %1                                             // users: %6, %3
bb0(%0 : $*T, %1 : $C<T>):
  debug_value_addr %0 : $*T, let, name "newValue", argno 1 // id: %2
  debug_value %1 : $C<T>, let, name "self", argno 2 // id: %3
  %4 = alloc_stack $T                             // users: %10, %8, %5
  copy_addr %0 to [initialization] %4 : $*T       // id: %5
  %6 = ref_element_addr %1 : $C<T>, #C.z          // user: %7
  %7 = begin_access [modify] [dynamic] %6 : $*T   // users: %9, %8
  copy_addr [take] %4 to %7 : $*T                 // id: %8
  end_access %7 : $*T                             // id: %9
  dealloc_stack %4 : $*T                          // id: %10
  destroy_addr %0 : $*T                           // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1CC8computedxvs'

// C.computed.modify
sil hidden [transparent] @$s3foo1CC8computedxvM : $@yield_once @convention(method) <T> (@guaranteed C<T>) -> @yields @inout T {
// %0                                             // users: %7, %14, %4, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = alloc_stack $T                             // users: %8, %7, %17, %16, %12, %5, %4
  // function_ref C.computed.getter
  %3 = function_ref @$s3foo1CC8computedxvg : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0 // user: %4
  %4 = apply %3<T>(%2, %0) : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0
  yield %2 : $*T, resume bb1, unwind bb2          // id: %5

bb1:                                              // Preds: bb0
  // function_ref C.computed.setter
  %6 = function_ref @$s3foo1CC8computedxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> () // user: %7
  %7 = apply %6<T>(%2, %0) : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> ()
  dealloc_stack %2 : $*T                          // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10

bb2:                                              // Preds: bb0
  %11 = alloc_stack $T                            // users: %15, %14, %12
  copy_addr %2 to [initialization] %11 : $*T      // id: %12
  // function_ref C.computed.setter
  %13 = function_ref @$s3foo1CC8computedxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> () // user: %14
  %14 = apply %13<T>(%11, %0) : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> ()
  dealloc_stack %11 : $*T                         // id: %15
  destroy_addr %2 : $*T                           // id: %16
  dealloc_stack %2 : $*T                          // id: %17
  unwind                                          // id: %18
} // end sil function '$s3foo1CC8computedxvM'

// C.__allocating_init(x:y:z:)
sil hidden [exact_self_class] @$s3foo1CC1x1y1zACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxtcfC : $@convention(method) <T> (Int, @owned Optional<LifetimeTracked>, @in T, @thick C<T>.Type) -> @owned C<T> {
// %0                                             // user: %6
// %1                                             // user: %6
// %2                                             // user: %6
bb0(%0 : $Int, %1 : $Optional<LifetimeTracked>, %2 : $*T, %3 : $@thick C<T>.Type):
  %4 = alloc_ref $C<T>                            // user: %6
  // function_ref C.init(x:y:z:)
  %5 = function_ref @$s3foo1CC1x1y1zACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxtcfc : $@convention(method) <τ_0_0> (Int, @owned Optional<LifetimeTracked>, @in τ_0_0, @owned C<τ_0_0>) -> @owned C<τ_0_0> // user: %6
  %6 = apply %5<T>(%0, %1, %2, %4) : $@convention(method) <τ_0_0> (Int, @owned Optional<LifetimeTracked>, @in τ_0_0, @owned C<τ_0_0>) -> @owned C<τ_0_0> // user: %7
  return %6 : $C<T>                               // id: %7
} // end sil function '$s3foo1CC1x1y1zACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxtcfC'

// C.init(x:y:z:)
sil hidden @$s3foo1CC1x1y1zACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxtcfc : $@convention(method) <T> (Int, @owned Optional<LifetimeTracked>, @in T, @owned C<T>) -> @owned C<T> {
// %0                                             // users: %52, %15, %4
// %1                                             // users: %119, %70, %21, %17, %5
// %2                                             // users: %118, %89, %25, %6
// %3                                             // users: %120, %111, %114, %109, %26, %18, %13, %9, %7
bb0(%0 : $Int, %1 : $Optional<LifetimeTracked>, %2 : $*T, %3 : $C<T>):
  debug_value %0 : $Int, let, name "x", argno 1   // id: %4
  debug_value %1 : $Optional<LifetimeTracked>, let, name "y", argno 2 // id: %5
  debug_value_addr %2 : $*T, let, name "z", argno 3 // id: %6
  debug_value %3 : $C<T>, let, name "self", argno 4 // id: %7
  %8 = enum $Optional<LifetimeTracked>, #Optional.none!enumelt // user: %11
  %9 = ref_element_addr %3 : $C<T>, #C.y          // user: %10
  %10 = begin_access [modify] [dynamic] %9 : $*Optional<LifetimeTracked> // users: %11, %12
  store %8 to %10 : $*Optional<LifetimeTracked>   // id: %11
  end_access %10 : $*Optional<LifetimeTracked>    // id: %12
  %13 = ref_element_addr %3 : $C<T>, #C.x         // user: %14
  %14 = begin_access [modify] [dynamic] %13 : $*Int // users: %15, %16
  store %0 to %14 : $*Int                         // id: %15
  end_access %14 : $*Int                          // id: %16
  retain_value %1 : $Optional<LifetimeTracked>    // id: %17
  %18 = ref_element_addr %3 : $C<T>, #C.y         // user: %19
  %19 = begin_access [modify] [dynamic] %18 : $*Optional<LifetimeTracked> // users: %21, %20, %23
  %20 = load %19 : $*Optional<LifetimeTracked>    // user: %22
  store %1 to %19 : $*Optional<LifetimeTracked>   // id: %21
  release_value %20 : $Optional<LifetimeTracked>  // id: %22
  end_access %19 : $*Optional<LifetimeTracked>    // id: %23
  %24 = alloc_stack $T                            // users: %30, %28, %25
  copy_addr %2 to [initialization] %24 : $*T      // id: %25
  %26 = ref_element_addr %3 : $C<T>, #C.z         // user: %27
  %27 = begin_access [modify] [dynamic] %26 : $*T // users: %29, %28
  copy_addr [take] %24 to [initialization] %27 : $*T // id: %28
  end_access %27 : $*T                            // id: %29
  dealloc_stack %24 : $*T                         // id: %30
  %31 = alloc_stack $DefaultStringInterpolation, var, name "$interpolation" // users: %102, %39, %105, %104, %46, %53, %64, %71, %82, %87, %97
  %32 = integer_literal $Builtin.Int32, 2         // user: %33
  %33 = struct $Int (%32 : $Builtin.Int32)        // user: %38
  %34 = integer_literal $Builtin.Int32, 3         // user: %35
  %35 = struct $Int (%34 : $Builtin.Int32)        // user: %38
  %36 = metatype $@thin DefaultStringInterpolation.Type // user: %38
  // function_ref DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
  %37 = function_ref @$ss26DefaultStringInterpolationV15literalCapacity18interpolationCountABSi_SitcfC : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %38
  %38 = apply %37(%33, %35, %36) : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %39
  store %38 to %31 : $*DefaultStringInterpolation // id: %39
  %40 = string_literal utf8 ""                    // user: %45
  %41 = integer_literal $Builtin.Word, 0          // user: %45
  %42 = integer_literal $Builtin.Int1, -1         // user: %45
  %43 = metatype $@thin String.Type               // user: %45
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %44 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %45
  %45 = apply %44(%40, %41, %42, %43) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %50, %48
  %46 = begin_access [modify] [static] %31 : $*DefaultStringInterpolation // users: %49, %48
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %47 = function_ref @$ss26DefaultStringInterpolationV13appendLiteralyySSF : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %48
  %48 = apply %47(%45, %46) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %46 : $*DefaultStringInterpolation   // id: %49
  release_value %45 : $String                     // id: %50
  %51 = alloc_stack $Int                          // users: %52, %57, %55
  store %0 to %51 : $*Int                         // id: %52
  %53 = begin_access [modify] [static] %31 : $*DefaultStringInterpolation // users: %56, %55
  // function_ref DefaultStringInterpolation.appendInterpolation<A>(_:)
  %54 = function_ref @$ss26DefaultStringInterpolationV06appendC0yyxs06CustomB11ConvertibleRzlF : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> () // user: %55
  %55 = apply %54<Int>(%51, %53) : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()
  end_access %53 : $*DefaultStringInterpolation   // id: %56
  dealloc_stack %51 : $*Int                       // id: %57
  %58 = string_literal utf8 " "                   // user: %63
  %59 = integer_literal $Builtin.Word, 1          // user: %63
  %60 = integer_literal $Builtin.Int1, -1         // user: %63
  %61 = metatype $@thin String.Type               // user: %63
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %62 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %63
  %63 = apply %62(%58, %59, %60, %61) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %68, %66
  %64 = begin_access [modify] [static] %31 : $*DefaultStringInterpolation // users: %67, %66
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %65 = function_ref @$ss26DefaultStringInterpolationV13appendLiteralyySSF : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %66
  %66 = apply %65(%63, %64) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %64 : $*DefaultStringInterpolation   // id: %67
  release_value %63 : $String                     // id: %68
  %69 = alloc_stack $Optional<LifetimeTracked>    // users: %70, %75, %73
  store %1 to %69 : $*Optional<LifetimeTracked>   // id: %70
  %71 = begin_access [modify] [static] %31 : $*DefaultStringInterpolation // users: %74, %73
  // function_ref DefaultStringInterpolation.appendInterpolation<A>(_:)
  %72 = function_ref @$ss26DefaultStringInterpolationV06appendC0yyxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> () // user: %73
  %73 = apply %72<LifetimeTracked?>(%69, %71) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()
  end_access %71 : $*DefaultStringInterpolation   // id: %74
  dealloc_stack %69 : $*Optional<LifetimeTracked> // id: %75
  %76 = string_literal utf8 " "                   // user: %81
  %77 = integer_literal $Builtin.Word, 1          // user: %81
  %78 = integer_literal $Builtin.Int1, -1         // user: %81
  %79 = metatype $@thin String.Type               // user: %81
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %80 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %81
  %81 = apply %80(%76, %77, %78, %79) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %86, %84
  %82 = begin_access [modify] [static] %31 : $*DefaultStringInterpolation // users: %85, %84
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %83 = function_ref @$ss26DefaultStringInterpolationV13appendLiteralyySSF : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %84
  %84 = apply %83(%81, %82) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %82 : $*DefaultStringInterpolation   // id: %85
  release_value %81 : $String                     // id: %86
  %87 = begin_access [modify] [static] %31 : $*DefaultStringInterpolation // users: %90, %89
  // function_ref DefaultStringInterpolation.appendInterpolation<A>(_:)
  %88 = function_ref @$ss26DefaultStringInterpolationV06appendC0yyxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> () // user: %89
  %89 = apply %88<T>(%2, %87) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()
  end_access %87 : $*DefaultStringInterpolation   // id: %90
  %91 = string_literal utf8 ""                    // user: %96
  %92 = integer_literal $Builtin.Word, 0          // user: %96
  %93 = integer_literal $Builtin.Int1, -1         // user: %96
  %94 = metatype $@thin String.Type               // user: %96
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %95 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %96
  %96 = apply %95(%91, %92, %93, %94) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %101, %99
  %97 = begin_access [modify] [static] %31 : $*DefaultStringInterpolation // users: %100, %99
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %98 = function_ref @$ss26DefaultStringInterpolationV13appendLiteralyySSF : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %99
  %99 = apply %98(%96, %97) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %97 : $*DefaultStringInterpolation   // id: %100
  release_value %96 : $String                     // id: %101
  %102 = load %31 : $*DefaultStringInterpolation  // users: %108, %103
  retain_value %102 : $DefaultStringInterpolation // id: %103
  destroy_addr %31 : $*DefaultStringInterpolation // id: %104
  dealloc_stack %31 : $*DefaultStringInterpolation // id: %105
  %106 = metatype $@thin String.Type              // user: %108
  // function_ref String.init(stringInterpolation:)
  %107 = function_ref @$sSS19stringInterpolationSSs013DefaultStringB0V_tcfC : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %108
  %108 = apply %107(%102, %106) : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %110
  %109 = ref_element_addr %3 : $C<T>, #C.immutable // user: %110
  store %108 to %109 : $*String                   // id: %110
  %111 = ref_element_addr %3 : $C<T>, #C.immutable // user: %112
  %112 = load %111 : $*String                     // users: %116, %113
  retain_value %112 : $String                     // id: %113
  %114 = ref_element_addr %3 : $C<T>, #C.secretlyMutable // user: %115
  %115 = begin_access [modify] [dynamic] %114 : $*String // users: %116, %117
  store %112 to %115 : $*String                   // id: %116
  end_access %115 : $*String                      // id: %117
  destroy_addr %2 : $*T                           // id: %118
  release_value %1 : $Optional<LifetimeTracked>   // id: %119
  return %3 : $C<T>                               // id: %120
} // end sil function '$s3foo1CC1x1y1zACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxtcfc'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int32"(%0 : $Builtin.IntLiteral) : $(Builtin.Int32, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int32, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int32)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
sil [serialized] @$ss26DefaultStringInterpolationV15literalCapacity18interpolationCountABSi_SitcfC : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// DefaultStringInterpolation.appendLiteral(_:)
sil [serialized] @$ss26DefaultStringInterpolationV13appendLiteralyySSF : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()

// DefaultStringInterpolation.appendInterpolation<A>(_:)
sil [serialized] @$ss26DefaultStringInterpolationV06appendC0yyxs06CustomB11ConvertibleRzlF : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()

// DefaultStringInterpolation.appendInterpolation<A>(_:)
sil [serialized] @$ss26DefaultStringInterpolationV06appendC0yyxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()

// String.init(stringInterpolation:)
sil [serialized] [readonly] @$sSS19stringInterpolationSSs013DefaultStringB0V_tcfC : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String

// C.deinit
sil hidden @$s3foo1CCfd : $@convention(method) <T> (@guaranteed C<T>) -> @owned Builtin.NativeObject {
// %0                                             // users: %18, %14, %10, %6, %2, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $C<T>, #C.y          // user: %3
  %3 = begin_access [deinit] [static] %2 : $*Optional<LifetimeTracked> // users: %5, %4
  destroy_addr %3 : $*Optional<LifetimeTracked>   // id: %4
  end_access %3 : $*Optional<LifetimeTracked>     // id: %5
  %6 = ref_element_addr %0 : $C<T>, #C.z          // user: %7
  %7 = begin_access [deinit] [static] %6 : $*T    // users: %9, %8
  destroy_addr %7 : $*T                           // id: %8
  end_access %7 : $*T                             // id: %9
  %10 = ref_element_addr %0 : $C<T>, #C.immutable // user: %11
  %11 = begin_access [deinit] [static] %10 : $*String // users: %13, %12
  destroy_addr %11 : $*String                     // id: %12
  end_access %11 : $*String                       // id: %13
  %14 = ref_element_addr %0 : $C<T>, #C.secretlyMutable // user: %15
  %15 = begin_access [deinit] [static] %14 : $*String // users: %17, %16
  destroy_addr %15 : $*String                     // id: %16
  end_access %15 : $*String                       // id: %17
  %18 = unchecked_ref_cast %0 : $C<T> to $Builtin.NativeObject // user: %19
  return %18 : $Builtin.NativeObject              // id: %19
} // end sil function '$s3foo1CCfd'

// C.__deallocating_deinit
sil hidden @$s3foo1CCfD : $@convention(method) <T> (@owned C<T>) -> () {
// %0                                             // users: %3, %1
bb0(%0 : $C<T>):
  debug_value %0 : $C<T>, let, name "self", argno 1 // id: %1
  // function_ref C.deinit
  %2 = function_ref @$s3foo1CCfd : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2<T>(%0) : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $C<T> // user: %5
  dealloc_ref %4 : $C<T>                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s3foo1CCfD'

// Point.x.getter
sil hidden [transparent] @$s3foo5PointV1xSdvg : $@convention(method) (@guaranteed Point) -> Double {
// %0                                             // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.x       // user: %3
  return %2 : $Double                             // id: %3
} // end sil function '$s3foo5PointV1xSdvg'

// Point.x.setter
sil hidden [transparent] @$s3foo5PointV1xSdvs : $@convention(method) (Double, @inout Point) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Double, %1 : $*Point):
  debug_value %0 : $Double, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Point, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*Point // users: %7, %5
  %5 = struct_element_addr %4 : $*Point, #Point.x // user: %6
  store %0 to %5 : $*Double                       // id: %6
  end_access %4 : $*Point                         // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s3foo5PointV1xSdvs'

// Point.x.modify
sil hidden [transparent] @$s3foo5PointV1xSdvM : $@yield_once @convention(method) (@inout Point) -> @yields @inout Double {
// %0                                             // users: %2, %1
bb0(%0 : $*Point):
  debug_value_addr %0 : $*Point, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Point // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Point, #Point.x // user: %4
  yield %3 : $*Double, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo5PointV1xSdvM'

// Point.y.getter
sil hidden [transparent] @$s3foo5PointV1ySdvg : $@convention(method) (@guaranteed Point) -> Double {
// %0                                             // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.y       // user: %3
  return %2 : $Double                             // id: %3
} // end sil function '$s3foo5PointV1ySdvg'

// Point.y.setter
sil hidden [transparent] @$s3foo5PointV1ySdvs : $@convention(method) (Double, @inout Point) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Double, %1 : $*Point):
  debug_value %0 : $Double, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Point, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*Point // users: %7, %5
  %5 = struct_element_addr %4 : $*Point, #Point.y // user: %6
  store %0 to %5 : $*Double                       // id: %6
  end_access %4 : $*Point                         // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s3foo5PointV1ySdvs'

// Point.y.modify
sil hidden [transparent] @$s3foo5PointV1ySdvM : $@yield_once @convention(method) (@inout Point) -> @yields @inout Double {
// %0                                             // users: %2, %1
bb0(%0 : $*Point):
  debug_value_addr %0 : $*Point, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Point // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Point, #Point.y // user: %4
  yield %3 : $*Double, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo5PointV1ySdvM'

// variable initialization expression of Point.trackLifetime
sil hidden [transparent] @$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvpfi : $@convention(thin) () -> @owned LifetimeTracked {
bb0:
  %0 = metatype $@thick LifetimeTracked.Type      // user: %6
  %1 = integer_literal $Builtin.Int32, 123        // user: %2
  %2 = struct $Int (%1 : $Builtin.Int32)          // user: %6
  // function_ref default argument 1 of LifetimeTracked.init(_:identity:)
  %3 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfcfA0_ : $@convention(thin) () -> Int // user: %4
  %4 = apply %3() : $@convention(thin) () -> Int  // user: %6
  // function_ref LifetimeTracked.__allocating_init(_:identity:)
  %5 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfC : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %6
  %6 = apply %5(%2, %4, %0) : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %7
  return %6 : $LifetimeTracked                    // id: %7
} // end sil function '$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvpfi'

// default argument 1 of LifetimeTracked.init(_:identity:)
sil shared_external [serialized] @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfcfA0_ : $@convention(thin) () -> Int {
bb0:
  %0 = integer_literal $Builtin.Int32, 0          // user: %1
  %1 = struct $Int (%0 : $Builtin.Int32)          // user: %2
  return %1 : $Int                                // id: %2
} // end sil function '$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfcfA0_'

// LifetimeTracked.__allocating_init(_:identity:)
sil [serialized] @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfC : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked

// Point.trackLifetime.getter
sil hidden [transparent] @$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvg : $@convention(method) (@guaranteed Point) -> @owned LifetimeTracked {
// %0                                             // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.trackLifetime // users: %4, %3
  strong_retain %2 : $LifetimeTracked             // id: %3
  return %2 : $LifetimeTracked                    // id: %4
} // end sil function '$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvg'

// Point.trackLifetime.setter
sil hidden [transparent] @$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvs : $@convention(method) (@owned LifetimeTracked, @inout Point) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $LifetimeTracked, %1 : $*Point):
  debug_value %0 : $LifetimeTracked, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Point, var, name "self", argno 2 // id: %3
  strong_retain %0 : $LifetimeTracked             // id: %4
  %5 = begin_access [modify] [static] %1 : $*Point // users: %10, %6
  %6 = struct_element_addr %5 : $*Point, #Point.trackLifetime // users: %8, %7
  %7 = load %6 : $*LifetimeTracked                // user: %9
  store %0 to %6 : $*LifetimeTracked              // id: %8
  strong_release %7 : $LifetimeTracked            // id: %9
  end_access %5 : $*Point                         // id: %10
  strong_release %0 : $LifetimeTracked            // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvs'

// Point.trackLifetime.modify
sil hidden [transparent] @$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvM : $@yield_once @convention(method) (@inout Point) -> @yields @inout LifetimeTracked {
// %0                                             // users: %2, %1
bb0(%0 : $*Point):
  debug_value_addr %0 : $*Point, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*Point // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Point, #Point.trackLifetime // user: %4
  yield %3 : $*LifetimeTracked, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Point                         // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo5PointV13trackLifetime14StdlibUnittest0D7TrackedCvM'

// Point.hypotenuse.getter
sil hidden [transparent] @$s3foo5PointV10hypotenuseSdvg : $@convention(method) (@guaranteed Point) -> Double {
// %0                                             // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.hypotenuse // user: %3
  return %2 : $Double                             // id: %3
} // end sil function '$s3foo5PointV10hypotenuseSdvg'

// Point.secretlyMutableHypotenuse.getter
sil hidden [transparent] @$s3foo5PointV25secretlyMutableHypotenuseSdvg : $@convention(method) (@guaranteed Point) -> Double {
// %0                                             // users: %2, %1
bb0(%0 : $Point):
  debug_value %0 : $Point, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Point, #Point.secretlyMutableHypotenuse // user: %3
  return %2 : $Double                             // id: %3
} // end sil function '$s3foo5PointV25secretlyMutableHypotenuseSdvg'

// Point.secretlyMutableHypotenuse.setter
sil hidden [transparent] @$s3foo5PointV25secretlyMutableHypotenuseSdvs : $@convention(method) (Double, @inout Point) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Double, %1 : $*Point):
  debug_value %0 : $Double, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*Point, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*Point // users: %7, %5
  %5 = struct_element_addr %4 : $*Point, #Point.secretlyMutableHypotenuse // user: %6
  store %0 to %5 : $*Double                       // id: %6
  end_access %4 : $*Point                         // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s3foo5PointV25secretlyMutableHypotenuseSdvs'

// Point.init(x:y:)
sil hidden @$s3foo5PointV1x1yACSd_SdtcfC : $@convention(method) (Double, Double, @thin Point.Type) -> @owned Point {
// %0                                             // users: %18, %54, %25, %24, %40, %39, %4
// %1                                             // users: %22, %54, %29, %28, %44, %43, %5
bb0(%0 : $Double, %1 : $Double, %2 : $@thin Point.Type):
  %3 = alloc_stack $Point, var, name "self"       // users: %50, %35, %20, %16, %13, %57, %58
  debug_value %0 : $Double, let, name "x", argno 1 // id: %4
  debug_value %1 : $Double, let, name "y", argno 2 // id: %5
  %6 = metatype $@thick LifetimeTracked.Type      // user: %12
  %7 = integer_literal $Builtin.Int32, 123        // user: %8
  %8 = struct $Int (%7 : $Builtin.Int32)          // user: %12
  // function_ref default argument 1 of LifetimeTracked.init(_:identity:)
  %9 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfcfA0_ : $@convention(thin) () -> Int // user: %10
  %10 = apply %9() : $@convention(thin) () -> Int // user: %12
  // function_ref LifetimeTracked.__allocating_init(_:identity:)
  %11 = function_ref @$s14StdlibUnittest15LifetimeTrackedC_8identityACSi_SitcfC : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // user: %12
  %12 = apply %11(%8, %10, %6) : $@convention(method) (Int, Int, @thick LifetimeTracked.Type) -> @owned LifetimeTracked // users: %56, %54, %15, %14
  %13 = struct_element_addr %3 : $*Point, #Point.trackLifetime // user: %15
  strong_retain %12 : $LifetimeTracked            // id: %14
  store %12 to %13 : $*LifetimeTracked            // id: %15
  %16 = begin_access [modify] [static] %3 : $*Point // users: %19, %17
  %17 = struct_element_addr %16 : $*Point, #Point.x // user: %18
  store %0 to %17 : $*Double                      // id: %18
  end_access %16 : $*Point                        // id: %19
  %20 = begin_access [modify] [static] %3 : $*Point // users: %23, %21
  %21 = struct_element_addr %20 : $*Point, #Point.y // user: %22
  store %1 to %21 : $*Double                      // id: %22
  end_access %20 : $*Point                        // id: %23
  %24 = struct_extract %0 : $Double, #Double._value // user: %26
  %25 = struct_extract %0 : $Double, #Double._value // user: %26
  %26 = builtin "fmul_FPIEEE64"(%24 : $Builtin.FPIEEE64, %25 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %32
  %27 = tuple ()
  %28 = struct_extract %1 : $Double, #Double._value // user: %30
  %29 = struct_extract %1 : $Double, #Double._value // user: %30
  %30 = builtin "fmul_FPIEEE64"(%28 : $Builtin.FPIEEE64, %29 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %32
  %31 = tuple ()
  %32 = builtin "fadd_FPIEEE64"(%26 : $Builtin.FPIEEE64, %30 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %34
  %33 = tuple ()
  %34 = struct $Double (%32 : $Builtin.FPIEEE64)  // users: %37, %54
  %35 = begin_access [modify] [static] %3 : $*Point // users: %38, %36
  %36 = struct_element_addr %35 : $*Point, #Point.hypotenuse // user: %37
  store %34 to %36 : $*Double                     // id: %37
  end_access %35 : $*Point                        // id: %38
  %39 = struct_extract %0 : $Double, #Double._value // user: %41
  %40 = struct_extract %0 : $Double, #Double._value // user: %41
  %41 = builtin "fmul_FPIEEE64"(%39 : $Builtin.FPIEEE64, %40 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %47
  %42 = tuple ()
  %43 = struct_extract %1 : $Double, #Double._value // user: %45
  %44 = struct_extract %1 : $Double, #Double._value // user: %45
  %45 = builtin "fmul_FPIEEE64"(%43 : $Builtin.FPIEEE64, %44 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %47
  %46 = tuple ()
  %47 = builtin "fadd_FPIEEE64"(%41 : $Builtin.FPIEEE64, %45 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %49
  %48 = tuple ()
  %49 = struct $Double (%47 : $Builtin.FPIEEE64)  // users: %52, %54
  %50 = begin_access [modify] [static] %3 : $*Point // users: %53, %51
  %51 = struct_element_addr %50 : $*Point, #Point.secretlyMutableHypotenuse // user: %52
  store %49 to %51 : $*Double                     // id: %52
  end_access %50 : $*Point                        // id: %53
  %54 = struct $Point (%0 : $Double, %1 : $Double, %12 : $LifetimeTracked, %34 : $Double, %49 : $Double) // users: %59, %55
  retain_value %54 : $Point                       // id: %55
  strong_release %12 : $LifetimeTracked           // id: %56
  destroy_addr %3 : $*Point                       // id: %57
  dealloc_stack %3 : $*Point                      // id: %58
  return %54 : $Point                             // id: %59
} // end sil function '$s3foo5PointV1x1yACSd_SdtcfC'

// static Double.* infix(_:_:)
sil public_external [transparent] [serialized] @$sSd1moiyS2d_SdtFZ : $@convention(method) (Double, Double, @thin Double.Type) -> Double {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Double, %1 : $Double, %2 : $@thin Double.Type):
  %3 = struct_extract %0 : $Double, #Double._value // user: %5
  %4 = struct_extract %1 : $Double, #Double._value // user: %5
  %5 = builtin "fmul_FPIEEE64"(%3 : $Builtin.FPIEEE64, %4 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %7
  %6 = tuple ()
  %7 = struct $Double (%5 : $Builtin.FPIEEE64)    // user: %8
  return %7 : $Double                             // id: %8
} // end sil function '$sSd1moiyS2d_SdtFZ'

// static Double.+ infix(_:_:)
sil public_external [transparent] [serialized] @$sSd1poiyS2d_SdtFZ : $@convention(method) (Double, Double, @thin Double.Type) -> Double {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Double, %1 : $Double, %2 : $@thin Double.Type):
  %3 = struct_extract %0 : $Double, #Double._value // user: %5
  %4 = struct_extract %1 : $Double, #Double._value // user: %5
  %5 = builtin "fadd_FPIEEE64"(%3 : $Builtin.FPIEEE64, %4 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %7
  %6 = tuple ()
  %7 = struct $Double (%5 : $Builtin.FPIEEE64)    // user: %8
  return %7 : $Double                             // id: %8
} // end sil function '$sSd1poiyS2d_SdtFZ'

// static Point.== infix(_:_:)
sil hidden @$s3foo5PointV2eeoiySbAC_ACtFZ : $@convention(method) (@guaranteed Point, @guaranteed Point, @thin Point.Type) -> Bool {
// %0                                             // users: %27, %16, %12, %7, %3
// %1                                             // users: %28, %17, %13, %8, %4
// %2                                             // user: %5
bb0(%0 : $Point, %1 : $Point, %2 : $@thin Point.Type):
  debug_value %0 : $Point, let, name "a", argno 1 // id: %3
  debug_value %1 : $Point, let, name "b", argno 2 // id: %4
  debug_value %2 : $@thin Point.Type, let, name "self", argno 3 // id: %5
  %6 = metatype $@thin Double.Type
  %7 = struct_extract %0 : $Point, #Point.x       // user: %9
  %8 = struct_extract %1 : $Point, #Point.x       // user: %10
  %9 = struct_extract %7 : $Double, #Double._value // user: %11
  %10 = struct_extract %8 : $Double, #Double._value // user: %11
  %11 = builtin "fcmp_oeq_FPIEEE64"(%9 : $Builtin.FPIEEE64, %10 : $Builtin.FPIEEE64) : $Builtin.Int1 // user: %14
  retain_value %0 : $Point                        // id: %12
  retain_value %1 : $Point                        // id: %13
  cond_br %11, bb1, bb2                           // id: %14

bb1:                                              // Preds: bb0
  %15 = metatype $@thin Double.Type
  %16 = struct_extract %0 : $Point, #Point.y      // user: %18
  %17 = struct_extract %1 : $Point, #Point.y      // user: %19
  %18 = struct_extract %16 : $Double, #Double._value // user: %20
  %19 = struct_extract %17 : $Double, #Double._value // user: %20
  %20 = builtin "fcmp_oeq_FPIEEE64"(%18 : $Builtin.FPIEEE64, %19 : $Builtin.FPIEEE64) : $Builtin.Int1 // user: %21
  %21 = struct $Bool (%20 : $Builtin.Int1)        // user: %22
  br bb3(%21 : $Bool)                             // id: %22

bb2:                                              // Preds: bb0
  %23 = integer_literal $Builtin.Int1, 0          // user: %24
  %24 = struct $Bool (%23 : $Builtin.Int1)        // user: %25
  br bb3(%24 : $Bool)                             // id: %25

// %26                                            // user: %29
bb3(%26 : $Bool):                                 // Preds: bb2 bb1
  release_value %0 : $Point                       // id: %27
  release_value %1 : $Point                       // id: %28
  return %26 : $Bool                              // id: %29
} // end sil function '$s3foo5PointV2eeoiySbAC_ACtFZ'

// static FloatingPoint.== infix(_:_:)
sil public_external [transparent] [serialized] @$sSFsE2eeoiySbx_xtFZ : $@convention(method) <Self where Self : FloatingPoint> (@in_guaranteed Self, @in_guaranteed Self, @thick Self.Type) -> Bool {
// %0                                             // user: %4
// %1                                             // user: %4
bb0(%0 : $*Self, %1 : $*Self, %2 : $@thick Self.Type):
  %3 = witness_method $Self, #FloatingPoint.isEqual!1 : <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool // user: %4
  %4 = apply %3<Self>(%1, %0) : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool // user: %5
  return %4 : $Bool                               // id: %5
} // end sil function '$sSFsE2eeoiySbx_xtFZ'

// static Bool.&& infix(_:_:)
sil public_external [transparent] [serialized] [always_inline] @$sSb2aaoiyS2b_SbyKXKtKFZ : $@convention(method) (Bool, @noescape @callee_guaranteed () -> (Bool, @error Error), @thin Bool.Type) -> (Bool, @error Error) {
// %0                                             // user: %3
// %1                                             // user: %8
bb0(%0 : $Bool, %1 : $@noescape @callee_guaranteed () -> (Bool, @error Error), %2 : $@thin Bool.Type):
  %3 = struct_extract %0 : $Bool, #Bool._value    // user: %4
  cond_br %3, bb2, bb1                            // id: %4

bb1:                                              // Preds: bb0
  %5 = integer_literal $Builtin.Int1, 0           // user: %6
  %6 = struct $Bool (%5 : $Builtin.Int1)          // user: %7
  br bb5(%6 : $Bool)                              // id: %7

bb2:                                              // Preds: bb0
  try_apply %1() : $@noescape @callee_guaranteed () -> (Bool, @error Error), normal bb4, error bb3 // id: %8

// %9                                             // user: %10
bb3(%9 : $Error):                                 // Preds: bb2
  throw %9 : $Error                               // id: %10

// %11                                            // user: %12
bb4(%11 : $Bool):                                 // Preds: bb2
  br bb5(%11 : $Bool)                             // id: %12

// %13                                            // user: %14
bb5(%13 : $Bool):                                 // Preds: bb4 bb1
  return %13 : $Bool                              // id: %14
} // end sil function '$sSb2aaoiyS2b_SbyKXKtKFZ'

// protocol witness for static Equatable.== infix(_:_:) in conformance Point
sil private [transparent] [thunk] @$s3foo5PointVSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed Point, @in_guaranteed Point, @thick Point.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*Point, %1 : $*Point, %2 : $@thick Point.Type):
  %3 = load %0 : $*Point                          // user: %7
  %4 = load %1 : $*Point                          // user: %7
  %5 = metatype $@thin Point.Type                 // user: %7
  // function_ref static Point.== infix(_:_:)
  %6 = function_ref @$s3foo5PointV2eeoiySbAC_ACtFZ : $@convention(method) (@guaranteed Point, @guaranteed Point, @thin Point.Type) -> Bool // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (@guaranteed Point, @guaranteed Point, @thin Point.Type) -> Bool // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s3foo5PointVSQAASQ2eeoiySbx_xtFZTW'

// S.x.getter
sil hidden [transparent] @$s3foo1SV1xSivg : $@convention(method) <T where T : Equatable> (@in_guaranteed S<T>) -> Int {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, let, name "self", argno 1 // id: %1
  %2 = struct_element_addr %0 : $*S<T>, #S.x      // user: %3
  %3 = load %2 : $*Int                            // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s3foo1SV1xSivg'

// S.x.setter
sil hidden [transparent] @$s3foo1SV1xSivs : $@convention(method) <T where T : Equatable> (Int, @inout S<T>) -> () {
// %0                                             // users: %6, %2
// %1                                             // users: %4, %3
bb0(%0 : $Int, %1 : $*S<T>):
  debug_value %0 : $Int, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*S<T>, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*S<T> // users: %7, %5
  %5 = struct_element_addr %4 : $*S<T>, #S.x      // user: %6
  store %0 to %5 : $*Int                          // id: %6
  end_access %4 : $*S<T>                          // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s3foo1SV1xSivs'

// S.x.modify
sil hidden [transparent] @$s3foo1SV1xSivM : $@yield_once @convention(method) <T where T : Equatable> (@inout S<T>) -> @yields @inout Int {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*S<T> // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*S<T>, #S.x      // user: %4
  yield %3 : $*Int, resume bb1, unwind bb2        // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1SV1xSivM'

// variable initialization expression of S.y
sil hidden [transparent] @$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvpfi : $@convention(thin) <T where T : Equatable> () -> @owned Optional<LifetimeTracked> {
bb0:
  %0 = enum $Optional<LifetimeTracked>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<LifetimeTracked>          // id: %1
} // end sil function '$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvpfi'

// S.y.getter
sil hidden [transparent] @$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvg : $@convention(method) <T where T : Equatable> (@in_guaranteed S<T>) -> @owned Optional<LifetimeTracked> {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, let, name "self", argno 1 // id: %1
  %2 = struct_element_addr %0 : $*S<T>, #S.y      // user: %3
  %3 = load %2 : $*Optional<LifetimeTracked>      // users: %5, %4
  retain_value %3 : $Optional<LifetimeTracked>    // id: %4
  return %3 : $Optional<LifetimeTracked>          // id: %5
} // end sil function '$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvg'

// S.y.setter
sil hidden [transparent] @$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvs : $@convention(method) <T where T : Equatable> (@owned Optional<LifetimeTracked>, @inout S<T>) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $Optional<LifetimeTracked>, %1 : $*S<T>):
  debug_value %0 : $Optional<LifetimeTracked>, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*S<T>, var, name "self", argno 2 // id: %3
  retain_value %0 : $Optional<LifetimeTracked>    // id: %4
  %5 = begin_access [modify] [static] %1 : $*S<T> // users: %10, %6
  %6 = struct_element_addr %5 : $*S<T>, #S.y      // users: %8, %7
  %7 = load %6 : $*Optional<LifetimeTracked>      // user: %9
  store %0 to %6 : $*Optional<LifetimeTracked>    // id: %8
  release_value %7 : $Optional<LifetimeTracked>   // id: %9
  end_access %5 : $*S<T>                          // id: %10
  release_value %0 : $Optional<LifetimeTracked>   // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvs'

// S.y.modify
sil hidden [transparent] @$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvM : $@yield_once @convention(method) <T where T : Equatable> (@inout S<T>) -> @yields @inout Optional<LifetimeTracked> {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*S<T> // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*S<T>, #S.y      // user: %4
  yield %3 : $*Optional<LifetimeTracked>, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1SV1y14StdlibUnittest15LifetimeTrackedCSgvM'

// S.z.getter
sil hidden [transparent] @$s3foo1SV1zxvg : $@convention(method) <T where T : Equatable> (@in_guaranteed S<T>) -> @out T {
// %0                                             // user: %4
// %1                                             // users: %3, %2
bb0(%0 : $*T, %1 : $*S<T>):
  debug_value_addr %1 : $*S<T>, let, name "self", argno 1 // id: %2
  %3 = struct_element_addr %1 : $*S<T>, #S.z      // user: %4
  copy_addr %3 to [initialization] %0 : $*T       // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s3foo1SV1zxvg'

// S.z.setter
sil hidden [transparent] @$s3foo1SV1zxvs : $@convention(method) <T where T : Equatable> (@in T, @inout S<T>) -> () {
// %0                                             // users: %11, %5, %2
// %1                                             // users: %6, %3
bb0(%0 : $*T, %1 : $*S<T>):
  debug_value_addr %0 : $*T, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*S<T>, var, name "self", argno 2 // id: %3
  %4 = alloc_stack $T                             // users: %10, %8, %5
  copy_addr %0 to [initialization] %4 : $*T       // id: %5
  %6 = begin_access [modify] [static] %1 : $*S<T> // users: %9, %7
  %7 = struct_element_addr %6 : $*S<T>, #S.z      // user: %8
  copy_addr [take] %4 to %7 : $*T                 // id: %8
  end_access %6 : $*S<T>                          // id: %9
  dealloc_stack %4 : $*T                          // id: %10
  destroy_addr %0 : $*T                           // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1SV1zxvs'

// S.z.modify
sil hidden [transparent] @$s3foo1SV1zxvM : $@yield_once @convention(method) <T where T : Equatable> (@inout S<T>) -> @yields @inout T {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*S<T> // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*S<T>, #S.z      // user: %4
  yield %3 : $*T, resume bb1, unwind bb2          // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1SV1zxvM'

// S.p.getter
sil hidden [transparent] @$s3foo1SV1pAA5PointVvg : $@convention(method) <T where T : Equatable> (@in_guaranteed S<T>) -> @owned Point {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, let, name "self", argno 1 // id: %1
  %2 = struct_element_addr %0 : $*S<T>, #S.p      // user: %3
  %3 = load %2 : $*Point                          // users: %5, %4
  retain_value %3 : $Point                        // id: %4
  return %3 : $Point                              // id: %5
} // end sil function '$s3foo1SV1pAA5PointVvg'

// S.p.setter
sil hidden [transparent] @$s3foo1SV1pAA5PointVvs : $@convention(method) <T where T : Equatable> (@owned Point, @inout S<T>) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $Point, %1 : $*S<T>):
  debug_value %0 : $Point, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*S<T>, var, name "self", argno 2 // id: %3
  retain_value %0 : $Point                        // id: %4
  %5 = begin_access [modify] [static] %1 : $*S<T> // users: %10, %6
  %6 = struct_element_addr %5 : $*S<T>, #S.p      // users: %8, %7
  %7 = load %6 : $*Point                          // user: %9
  store %0 to %6 : $*Point                        // id: %8
  release_value %7 : $Point                       // id: %9
  end_access %5 : $*S<T>                          // id: %10
  release_value %0 : $Point                       // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1SV1pAA5PointVvs'

// S.p.modify
sil hidden [transparent] @$s3foo1SV1pAA5PointVvM : $@yield_once @convention(method) <T where T : Equatable> (@inout S<T>) -> @yields @inout Point {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*S<T> // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*S<T>, #S.p      // user: %4
  yield %3 : $*Point, resume bb1, unwind bb2      // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1SV1pAA5PointVvM'

// S.c.getter
sil hidden [transparent] @$s3foo1SV1cAA1CCyxGvg : $@convention(method) <T where T : Equatable> (@in_guaranteed S<T>) -> @owned C<T> {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, let, name "self", argno 1 // id: %1
  %2 = struct_element_addr %0 : $*S<T>, #S.c      // user: %3
  %3 = load %2 : $*C<T>                           // users: %5, %4
  strong_retain %3 : $C<T>                        // id: %4
  return %3 : $C<T>                               // id: %5
} // end sil function '$s3foo1SV1cAA1CCyxGvg'

// S.c.setter
sil hidden [transparent] @$s3foo1SV1cAA1CCyxGvs : $@convention(method) <T where T : Equatable> (@owned C<T>, @inout S<T>) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $C<T>, %1 : $*S<T>):
  debug_value %0 : $C<T>, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*S<T>, var, name "self", argno 2 // id: %3
  strong_retain %0 : $C<T>                        // id: %4
  %5 = begin_access [modify] [static] %1 : $*S<T> // users: %10, %6
  %6 = struct_element_addr %5 : $*S<T>, #S.c      // users: %8, %7
  %7 = load %6 : $*C<T>                           // user: %9
  store %0 to %6 : $*C<T>                         // id: %8
  strong_release %7 : $C<T>                       // id: %9
  end_access %5 : $*S<T>                          // id: %10
  strong_release %0 : $C<T>                       // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo1SV1cAA1CCyxGvs'

// S.c.modify
sil hidden [transparent] @$s3foo1SV1cAA1CCyxGvM : $@yield_once @convention(method) <T where T : Equatable> (@inout S<T>) -> @yields @inout C<T> {
// %0                                             // users: %2, %1
bb0(%0 : $*S<T>):
  debug_value_addr %0 : $*S<T>, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*S<T> // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*S<T>, #S.c      // user: %4
  yield %3 : $*C<T>, resume bb1, unwind bb2       // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*S<T>                          // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo1SV1cAA1CCyxGvM'

// static S.== infix(_:_:)
sil hidden @$s3foo1SV2eeoiySbACyxG_AEtFZ : $@convention(method) <T where T : Equatable> (@in_guaranteed S<T>, @in_guaranteed S<T>, @thin S<T>.Type) -> Bool {
// %0                                             // users: %14, %48, %68, %85, %6, %3
// %1                                             // users: %25, %51, %71, %90, %8, %4
// %2                                             // user: %5
bb0(%0 : $*S<T>, %1 : $*S<T>, %2 : $@thin S<T>.Type):
  debug_value_addr %0 : $*S<T>, let, name "a", argno 1 // id: %3
  debug_value_addr %1 : $*S<T>, let, name "b", argno 2 // id: %4
  debug_value %2 : $@thin S<T>.Type, let, name "self", argno 3 // id: %5
  %6 = struct_element_addr %0 : $*S<T>, #S.x      // user: %7
  %7 = load %6 : $*Int                            // user: %10
  %8 = struct_element_addr %1 : $*S<T>, #S.x      // user: %9
  %9 = load %8 : $*Int                            // user: %11
  %10 = struct_extract %7 : $Int, #Int._value     // user: %12
  %11 = struct_extract %9 : $Int, #Int._value     // user: %12
  %12 = builtin "cmp_eq_Int32"(%10 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int1 // user: %13
  cond_br %12, bb1, bb8                           // id: %13

bb1:                                              // Preds: bb0
  %14 = struct_element_addr %0 : $*S<T>, #S.y     // user: %15
  %15 = load %14 : $*Optional<LifetimeTracked>    // users: %17, %16
  retain_value %15 : $Optional<LifetimeTracked>   // id: %16
  switch_enum %15 : $Optional<LifetimeTracked>, case #Optional.some!enumelt.1: bb2, case #Optional.none!enumelt: bb3 // id: %17

// %18                                            // user: %19
bb2(%18 : $LifetimeTracked):                      // Preds: bb1
  %19 = init_existential_ref %18 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %20
  %20 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %19 : $AnyObject // user: %21
  br bb4(%20 : $Optional<AnyObject>)              // id: %21

bb3:                                              // Preds: bb1
  %22 = enum $Optional<AnyObject>, #Optional.none!enumelt // user: %23
  br bb4(%22 : $Optional<AnyObject>)              // id: %23

// %24                                            // users: %39, %37
bb4(%24 : $Optional<AnyObject>):                  // Preds: bb3 bb2
  %25 = struct_element_addr %1 : $*S<T>, #S.y     // user: %26
  %26 = load %25 : $*Optional<LifetimeTracked>    // users: %28, %27
  retain_value %26 : $Optional<LifetimeTracked>   // id: %27
  switch_enum %26 : $Optional<LifetimeTracked>, case #Optional.some!enumelt.1: bb5, case #Optional.none!enumelt: bb6 // id: %28

// %29                                            // user: %30
bb5(%29 : $LifetimeTracked):                      // Preds: bb4
  %30 = init_existential_ref %29 : $LifetimeTracked : $LifetimeTracked, $AnyObject // user: %31
  %31 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %30 : $AnyObject // user: %32
  br bb7(%31 : $Optional<AnyObject>)              // id: %32

bb6:                                              // Preds: bb4
  %33 = enum $Optional<AnyObject>, #Optional.none!enumelt // user: %34
  br bb7(%33 : $Optional<AnyObject>)              // id: %34

// %35                                            // users: %38, %37
bb7(%35 : $Optional<AnyObject>):                  // Preds: bb6 bb5
  // function_ref === infix(_:_:)
  %36 = function_ref @$ss3eeeoiySbyXlSg_ABtF : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %37
  %37 = apply %36(%24, %35) : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %40
  release_value %35 : $Optional<AnyObject>        // id: %38
  release_value %24 : $Optional<AnyObject>        // id: %39
  br bb9(%37 : $Bool)                             // id: %40

bb8:                                              // Preds: bb0
  %41 = integer_literal $Builtin.Int1, 0          // user: %42
  %42 = struct $Bool (%41 : $Builtin.Int1)        // user: %43
  br bb9(%42 : $Bool)                             // id: %43

// %44                                            // user: %45
bb9(%44 : $Bool):                                 // Preds: bb8 bb7
  %45 = struct_extract %44 : $Bool, #Bool._value  // user: %46
  cond_br %45, bb10, bb11                         // id: %46

bb10:                                             // Preds: bb9
  %47 = metatype $@thick T.Type                   // user: %55
  %48 = struct_element_addr %0 : $*S<T>, #S.z     // user: %50
  %49 = alloc_stack $T                            // users: %59, %58, %55, %50
  copy_addr %48 to [initialization] %49 : $*T     // id: %50
  %51 = struct_element_addr %1 : $*S<T>, #S.z     // user: %53
  %52 = alloc_stack $T                            // users: %57, %56, %55, %53
  copy_addr %51 to [initialization] %52 : $*T     // id: %53
  %54 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %55
  %55 = apply %54<T>(%49, %52, %47) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %60
  destroy_addr %52 : $*T                          // id: %56
  dealloc_stack %52 : $*T                         // id: %57
  destroy_addr %49 : $*T                          // id: %58
  dealloc_stack %49 : $*T                         // id: %59
  br bb12(%55 : $Bool)                            // id: %60

bb11:                                             // Preds: bb9
  %61 = integer_literal $Builtin.Int1, 0          // user: %62
  %62 = struct $Bool (%61 : $Builtin.Int1)        // user: %63
  br bb12(%62 : $Bool)                            // id: %63

// %64                                            // user: %65
bb12(%64 : $Bool):                                // Preds: bb11 bb10
  %65 = struct_extract %64 : $Bool, #Bool._value  // user: %66
  cond_br %65, bb13, bb14                         // id: %66

bb13:                                             // Preds: bb12
  %67 = metatype $@thin Point.Type                // user: %75
  %68 = struct_element_addr %0 : $*S<T>, #S.p     // user: %69
  %69 = load %68 : $*Point                        // users: %77, %75, %70
  retain_value %69 : $Point                       // id: %70
  %71 = struct_element_addr %1 : $*S<T>, #S.p     // user: %72
  %72 = load %71 : $*Point                        // users: %76, %75, %73
  retain_value %72 : $Point                       // id: %73
  // function_ref static Point.== infix(_:_:)
  %74 = function_ref @$s3foo5PointV2eeoiySbAC_ACtFZ : $@convention(method) (@guaranteed Point, @guaranteed Point, @thin Point.Type) -> Bool // user: %75
  %75 = apply %74(%69, %72, %67) : $@convention(method) (@guaranteed Point, @guaranteed Point, @thin Point.Type) -> Bool // user: %78
  release_value %72 : $Point                      // id: %76
  release_value %69 : $Point                      // id: %77
  br bb15(%75 : $Bool)                            // id: %78

bb14:                                             // Preds: bb12
  %79 = integer_literal $Builtin.Int1, 0          // user: %80
  %80 = struct $Bool (%79 : $Builtin.Int1)        // user: %81
  br bb15(%80 : $Bool)                            // id: %81

// %82                                            // user: %83
bb15(%82 : $Bool):                                // Preds: bb14 bb13
  %83 = struct_extract %82 : $Bool, #Bool._value  // user: %84
  cond_br %83, bb16, bb17                         // id: %84

bb16:                                             // Preds: bb15
  %85 = struct_element_addr %0 : $*S<T>, #S.c     // user: %86
  %86 = load %85 : $*C<T>                         // users: %88, %87
  strong_retain %86 : $C<T>                       // id: %87
  %88 = init_existential_ref %86 : $C<T> : $C<T>, $AnyObject // user: %89
  %89 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %88 : $AnyObject // users: %98, %96
  %90 = struct_element_addr %1 : $*S<T>, #S.c     // user: %91
  %91 = load %90 : $*C<T>                         // users: %93, %92
  strong_retain %91 : $C<T>                       // id: %92
  %93 = init_existential_ref %91 : $C<T> : $C<T>, $AnyObject // user: %94
  %94 = enum $Optional<AnyObject>, #Optional.some!enumelt.1, %93 : $AnyObject // users: %97, %96
  // function_ref === infix(_:_:)
  %95 = function_ref @$ss3eeeoiySbyXlSg_ABtF : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %96
  %96 = apply %95(%89, %94) : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool // user: %99
  release_value %94 : $Optional<AnyObject>        // id: %97
  release_value %89 : $Optional<AnyObject>        // id: %98
  br bb18(%96 : $Bool)                            // id: %99

bb17:                                             // Preds: bb15
  %100 = integer_literal $Builtin.Int1, 0         // user: %101
  %101 = struct $Bool (%100 : $Builtin.Int1)      // user: %102
  br bb18(%101 : $Bool)                           // id: %102

// %103                                           // user: %104
bb18(%103 : $Bool):                               // Preds: bb17 bb16
  return %103 : $Bool                             // id: %104
} // end sil function '$s3foo1SV2eeoiySbACyxG_AEtFZ'

// static Int.== infix(_:_:)
sil public_external [transparent] [serialized] @$sSi2eeoiySbSi_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // user: %5
  %4 = struct_extract %1 : $Int, #Int._value      // user: %5
  %5 = builtin "cmp_eq_Int32"(%3 : $Builtin.Int32, %4 : $Builtin.Int32) : $Builtin.Int1 // user: %6
  %6 = struct $Bool (%5 : $Builtin.Int1)          // user: %7
  return %6 : $Bool                               // id: %7
} // end sil function '$sSi2eeoiySbSi_SitFZ'

// === infix(_:_:)
sil [serialized] @$ss3eeeoiySbyXlSg_ABtF : $@convention(thin) (@guaranteed Optional<AnyObject>, @guaranteed Optional<AnyObject>) -> Bool

// S.init(x:y:z:p:c:)
sil hidden @$s3foo1SV1x1y1z1p1cACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxAA5PointVAA1CCyxGtcfC : $@convention(method) <T where T : Equatable> (Int, @owned Optional<LifetimeTracked>, @in T, @owned Point, @owned C<T>, @thin S<T>.Type) -> @out S<T> {
// %0                                             // users: %15, %13, %11, %9, %7
// %1                                             // user: %8
// %2                                             // user: %10
// %3                                             // user: %12
// %4                                             // user: %14
// %5                                             // user: %16
bb0(%0 : $*S<T>, %1 : $Int, %2 : $Optional<LifetimeTracked>, %3 : $*T, %4 : $Point, %5 : $C<T>, %6 : $@thin S<T>.Type):
  %7 = struct_element_addr %0 : $*S<T>, #S.x      // user: %8
  store %1 to %7 : $*Int                          // id: %8
  %9 = struct_element_addr %0 : $*S<T>, #S.y      // user: %10
  store %2 to %9 : $*Optional<LifetimeTracked>    // id: %10
  %11 = struct_element_addr %0 : $*S<T>, #S.z     // user: %12
  copy_addr [take] %3 to [initialization] %11 : $*T // id: %12
  %13 = struct_element_addr %0 : $*S<T>, #S.p     // user: %14
  store %4 to %13 : $*Point                       // id: %14
  %15 = struct_element_addr %0 : $*S<T>, #S.c     // user: %16
  store %5 to %15 : $*C<T>                        // id: %16
  %17 = tuple ()                                  // user: %18
  return %17 : $()                                // id: %18
} // end sil function '$s3foo1SV1x1y1z1p1cACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxAA5PointVAA1CCyxGtcfC'

// protocol witness for static Equatable.== infix(_:_:) in conformance S<A>
sil private [transparent] [thunk] @$s3foo1SVyxGSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed S<τ_0_0>, @in_guaranteed S<τ_0_0>, @thick S<τ_0_0>.Type) -> Bool {
// %0                                             // user: %5
// %1                                             // user: %5
bb0(%0 : $*S<τ_0_0>, %1 : $*S<τ_0_0>, %2 : $@thick S<τ_0_0>.Type):
  %3 = metatype $@thin S<τ_0_0>.Type             // user: %5
  // function_ref static S.== infix(_:_:)
  %4 = function_ref @$s3foo1SV2eeoiySbACyxG_AEtFZ : $@convention(method) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed S<τ_0_0>, @in_guaranteed S<τ_0_0>, @thin S<τ_0_0>.Type) -> Bool // user: %5
  %5 = apply %4<τ_0_0>(%0, %1, %3) : $@convention(method) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed S<τ_0_0>, @in_guaranteed S<τ_0_0>, @thin S<τ_0_0>.Type) -> Bool // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$s3foo1SVyxGSQAASQ2eeoiySbx_xtFZTW'

// ComputedA.readOnly.getter
sil hidden @$s3foo9ComputedAC8readOnlyAA0B1BVvg : $@convention(method) (@guaranteed ComputedA) -> @owned ComputedB {
// %0                                             // user: %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  %2 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %4
  %3 = integer_literal $Builtin.Word, 60          // user: %8
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %8
  br bb1                                          // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int8, 2           // user: %8
  br bb2                                          // id: %7

bb2:                                              // Preds: bb1
  %8 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %6 : $Builtin.Int8) // user: %27
  %9 = integer_literal $Builtin.Int32, 72         // user: %10
  %10 = struct $UInt (%9 : $Builtin.Int32)        // user: %27
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %11 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %13
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %12 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %13
  %13 = partial_apply [callee_guaranteed] %12(%11) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %15, %14
  strong_retain %13 : $@callee_guaranteed () -> @owned String // id: %14
  %15 = convert_escape_to_noescape %13 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %21
  %16 = string_literal utf8 "Fatal error"         // user: %18
  %17 = integer_literal $Builtin.Word, 11         // user: %20
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %19 = integer_literal $Builtin.Int8, 2          // user: %20
  %20 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %19 : $Builtin.Int8) // user: %27
  %21 = apply %15() : $@noescape @callee_guaranteed () -> @owned String // user: %27
  br bb3                                          // id: %22

bb3:                                              // Preds: bb2
  %23 = integer_literal $Builtin.Int32, 1         // user: %24
  %24 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %27
  br bb4                                          // id: %25

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %26 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %27
  %27 = apply %26(%20, %21, %8, %10, %24) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %28
} // end sil function '$s3foo9ComputedAC8readOnlyAA0B1BVvg'

// StaticString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil public_external [transparent] [serialized] [readonly] @$ss12StaticStringV08_builtinB7Literal17utf8CodeUnitCount7isASCIIABBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin StaticString.Type) -> StaticString {
// %0                                             // user: %4
// %1                                             // user: %11
// %2                                             // user: %5
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Word, %2 : $Builtin.Int1, %3 : $@thin StaticString.Type):
  %4 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word // user: %11
  cond_br %2, bb2, bb1                            // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int8, 0           // user: %7
  br bb3(%6 : $Builtin.Int8)                      // id: %7

bb2:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int8, 2           // user: %9
  br bb3(%8 : $Builtin.Int8)                      // id: %9

// %10                                            // user: %11
bb3(%10 : $Builtin.Int8):                         // Preds: bb2 bb1
  %11 = struct $StaticString (%4 : $Builtin.Word, %1 : $Builtin.Word, %10 : $Builtin.Int8) // user: %12
  return %11 : $StaticString                      // id: %12
} // end sil function '$ss12StaticStringV08_builtinB7Literal17utf8CodeUnitCount7isASCIIABBp_BwBi1_tcfC'

// UInt.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @$sSu22_builtinIntegerLiteralSuBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt.Type) -> UInt {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin UInt.Type):
  %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int32"(%0 : $Builtin.IntLiteral) : $(Builtin.Int32, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int32, Builtin.Int1), 0 // user: %4
  %4 = struct $UInt (%3 : $Builtin.Int32)         // user: %5
  return %4 : $UInt                               // id: %5
} // end sil function '$sSu22_builtinIntegerLiteralSuBI_tcfC'

// default argument 0 of fatalError(_:file:line:)
sil shared_external [transparent] [serialized] @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_ : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String {
bb0:
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %0 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %2
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %1 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %2
  %2 = partial_apply [callee_guaranteed] %1(%0) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %3
  return %2 : $@callee_guaranteed () -> @owned String // id: %3
} // end sil function '$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_'

// fatalError(_:file:line:)
sil public_external [transparent] [serialized] @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutF : $@convention(thin) (@noescape @callee_guaranteed () -> @owned String, StaticString, UInt) -> Never {
// %0                                             // user: %10
// %1                                             // user: %16
// %2                                             // user: %16
bb0(%0 : $@noescape @callee_guaranteed () -> @owned String, %1 : $StaticString, %2 : $UInt):
  %3 = string_literal utf8 "Fatal error"          // user: %5
  %4 = integer_literal $Builtin.Word, 11          // user: %9
  %5 = builtin "ptrtoint_Word"(%3 : $Builtin.RawPointer) : $Builtin.Word // user: %9
  br bb1                                          // id: %6

bb1:                                              // Preds: bb0
  %7 = integer_literal $Builtin.Int8, 2           // user: %9
  br bb2                                          // id: %8

bb2:                                              // Preds: bb1
  %9 = struct $StaticString (%5 : $Builtin.Word, %4 : $Builtin.Word, %7 : $Builtin.Int8) // user: %16
  %10 = apply %0() : $@noescape @callee_guaranteed () -> @owned String // user: %16
  br bb3                                          // id: %11

bb3:                                              // Preds: bb2
  %12 = integer_literal $Builtin.Int32, 1         // user: %13
  %13 = struct $UInt32 (%12 : $Builtin.Int32)     // user: %16
  br bb4                                          // id: %14

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %15 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %16
  %16 = apply %15(%9, %10, %1, %2, %13) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %17
} // end sil function '$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutF'

// ComputedA.nonmutating.getter
sil hidden @$s3foo9ComputedAC11nonmutatingAA0B1BVvg : $@convention(method) (@guaranteed ComputedA) -> @owned ComputedB {
// %0                                             // user: %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  %2 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %4
  %3 = integer_literal $Builtin.Word, 60          // user: %8
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %8
  br bb1                                          // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int8, 2           // user: %8
  br bb2                                          // id: %7

bb2:                                              // Preds: bb1
  %8 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %6 : $Builtin.Int8) // user: %27
  %9 = integer_literal $Builtin.Int32, 74         // user: %10
  %10 = struct $UInt (%9 : $Builtin.Int32)        // user: %27
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %11 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %13
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %12 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %13
  %13 = partial_apply [callee_guaranteed] %12(%11) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %15, %14
  strong_retain %13 : $@callee_guaranteed () -> @owned String // id: %14
  %15 = convert_escape_to_noescape %13 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %21
  %16 = string_literal utf8 "Fatal error"         // user: %18
  %17 = integer_literal $Builtin.Word, 11         // user: %20
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %19 = integer_literal $Builtin.Int8, 2          // user: %20
  %20 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %19 : $Builtin.Int8) // user: %27
  %21 = apply %15() : $@noescape @callee_guaranteed () -> @owned String // user: %27
  br bb3                                          // id: %22

bb3:                                              // Preds: bb2
  %23 = integer_literal $Builtin.Int32, 1         // user: %24
  %24 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %27
  br bb4                                          // id: %25

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %26 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %27
  %27 = apply %26(%20, %21, %8, %10, %24) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %28
} // end sil function '$s3foo9ComputedAC11nonmutatingAA0B1BVvg'

// ComputedA.nonmutating.setter
sil hidden @$s3foo9ComputedAC11nonmutatingAA0B1BVvs : $@convention(method) (@owned ComputedB, @guaranteed ComputedA) -> () {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $ComputedB, %1 : $ComputedA):
  debug_value %0 : $ComputedB, let, name "newValue", argno 1 // id: %2
  debug_value %1 : $ComputedA, let, name "self", argno 2 // id: %3
  %4 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %6
  %5 = integer_literal $Builtin.Word, 60          // user: %10
  %6 = builtin "ptrtoint_Word"(%4 : $Builtin.RawPointer) : $Builtin.Word // user: %10
  br bb1                                          // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int8, 2           // user: %10
  br bb2                                          // id: %9

bb2:                                              // Preds: bb1
  %10 = struct $StaticString (%6 : $Builtin.Word, %5 : $Builtin.Word, %8 : $Builtin.Int8) // user: %29
  %11 = integer_literal $Builtin.Int32, 75        // user: %12
  %12 = struct $UInt (%11 : $Builtin.Int32)       // user: %29
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %13 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %15
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %14 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %15
  %15 = partial_apply [callee_guaranteed] %14(%13) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %17, %16
  strong_retain %15 : $@callee_guaranteed () -> @owned String // id: %16
  %17 = convert_escape_to_noescape %15 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %23
  %18 = string_literal utf8 "Fatal error"         // user: %20
  %19 = integer_literal $Builtin.Word, 11         // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %22
  %21 = integer_literal $Builtin.Int8, 2          // user: %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8) // user: %29
  %23 = apply %17() : $@noescape @callee_guaranteed () -> @owned String // user: %29
  br bb3                                          // id: %24

bb3:                                              // Preds: bb2
  %25 = integer_literal $Builtin.Int32, 1         // user: %26
  %26 = struct $UInt32 (%25 : $Builtin.Int32)     // user: %29
  br bb4                                          // id: %27

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %28 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %29
  %29 = apply %28(%22, %23, %10, %12, %26) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %30
} // end sil function '$s3foo9ComputedAC11nonmutatingAA0B1BVvs'

// ComputedA.nonmutating.modify
sil hidden [transparent] @$s3foo9ComputedAC11nonmutatingAA0B1BVvM : $@yield_once @convention(method) (@guaranteed ComputedA) -> @yields @inout ComputedB {
// %0                                             // users: %9, %16, %4, %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  %2 = alloc_stack $ComputedB                     // users: %13, %7, %5, %10, %18, %17, %6
  // function_ref ComputedA.nonmutating.getter
  %3 = function_ref @$s3foo9ComputedAC11nonmutatingAA0B1BVvg : $@convention(method) (@guaranteed ComputedA) -> @owned ComputedB // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed ComputedA) -> @owned ComputedB // user: %5
  store %4 to %2 : $*ComputedB                    // id: %5
  yield %2 : $*ComputedB, resume bb1, unwind bb2  // id: %6

bb1:                                              // Preds: bb0
  %7 = load %2 : $*ComputedB                      // user: %9
  // function_ref ComputedA.nonmutating.setter
  %8 = function_ref @$s3foo9ComputedAC11nonmutatingAA0B1BVvs : $@convention(method) (@owned ComputedB, @guaranteed ComputedA) -> () // user: %9
  %9 = apply %8(%7, %0) : $@convention(method) (@owned ComputedB, @guaranteed ComputedA) -> ()
  dealloc_stack %2 : $*ComputedB                  // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12

bb2:                                              // Preds: bb0
  %13 = load %2 : $*ComputedB                     // users: %16, %14
  retain_value %13 : $ComputedB                   // id: %14
  // function_ref ComputedA.nonmutating.setter
  %15 = function_ref @$s3foo9ComputedAC11nonmutatingAA0B1BVvs : $@convention(method) (@owned ComputedB, @guaranteed ComputedA) -> () // user: %16
  %16 = apply %15(%13, %0) : $@convention(method) (@owned ComputedB, @guaranteed ComputedA) -> ()
  destroy_addr %2 : $*ComputedB                   // id: %17
  dealloc_stack %2 : $*ComputedB                  // id: %18
  unwind                                          // id: %19
} // end sil function '$s3foo9ComputedAC11nonmutatingAA0B1BVvM'

// variable initialization expression of ComputedA.reabstracted
sil hidden [transparent] @$s3foo9ComputedAC12reabstractedyycvpfi : $@convention(thin) () -> @owned @callee_guaranteed () -> () {
bb0:
  // function_ref closure #1 in variable initialization expression of ComputedA.reabstracted
  %0 = function_ref @$s3foo9ComputedAC12reabstractedyycvpfiyycfU_ : $@convention(thin) () -> () // user: %2
  // function_ref thunk for @escaping @convention(thin) () -> ()
  %1 = function_ref @$sIet_Ieg_TR : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %2
  %2 = partial_apply [callee_guaranteed] %1(%0) : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %3
  return %2 : $@callee_guaranteed () -> ()        // id: %3
} // end sil function '$s3foo9ComputedAC12reabstractedyycvpfi'

// closure #1 in variable initialization expression of ComputedA.reabstracted
sil private @$s3foo9ComputedAC12reabstractedyycvpfiyycfU_ : $@convention(thin) () -> () {
bb0:
  %0 = tuple ()                                   // user: %1
  return %0 : $()                                 // id: %1
} // end sil function '$s3foo9ComputedAC12reabstractedyycvpfiyycfU_'

// thunk for @escaping @convention(thin) () -> ()
sil shared [transparent] [serializable] [reabstraction_thunk] @$sIet_Ieg_TR : $@convention(thin) (@convention(thin) () -> ()) -> () {
// %0                                             // user: %1
bb0(%0 : $@convention(thin) () -> ()):
  %1 = apply %0() : $@convention(thin) () -> ()
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$sIet_Ieg_TR'

// ComputedA.reabstracted.getter
sil hidden [transparent] @$s3foo9ComputedAC12reabstractedyycvg : $@convention(method) (@guaranteed ComputedA) -> @owned @callee_guaranteed () -> () {
// %0                                             // users: %2, %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $ComputedA, #ComputedA.reabstracted // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*@callee_guaranteed () -> () // users: %4, %6
  %4 = load %3 : $*@callee_guaranteed () -> ()    // users: %7, %5
  strong_retain %4 : $@callee_guaranteed () -> () // id: %5
  end_access %3 : $*@callee_guaranteed () -> ()   // id: %6
  return %4 : $@callee_guaranteed () -> ()        // id: %7
} // end sil function '$s3foo9ComputedAC12reabstractedyycvg'

// ComputedA.reabstracted.setter
sil hidden [transparent] @$s3foo9ComputedAC12reabstractedyycvs : $@convention(method) (@owned @callee_guaranteed () -> (), @guaranteed ComputedA) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $@callee_guaranteed () -> (), %1 : $ComputedA):
  debug_value %0 : $@callee_guaranteed () -> (), let, name "value", argno 1 // id: %2
  debug_value %1 : $ComputedA, let, name "self", argno 2 // id: %3
  strong_retain %0 : $@callee_guaranteed () -> () // id: %4
  %5 = ref_element_addr %1 : $ComputedA, #ComputedA.reabstracted // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*@callee_guaranteed () -> () // users: %8, %7, %10
  %7 = load %6 : $*@callee_guaranteed () -> ()    // user: %9
  store %0 to %6 : $*@callee_guaranteed () -> ()  // id: %8
  strong_release %7 : $@callee_guaranteed () -> () // id: %9
  end_access %6 : $*@callee_guaranteed () -> ()   // id: %10
  strong_release %0 : $@callee_guaranteed () -> () // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo9ComputedAC12reabstractedyycvs'

// ComputedA.reabstracted.modify
sil hidden [transparent] @$s3foo9ComputedAC12reabstractedyycvM : $@yield_once @convention(method) (@guaranteed ComputedA) -> @yields @inout @callee_guaranteed () -> () {
// %0                                             // users: %2, %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $ComputedA, #ComputedA.reabstracted // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*@callee_guaranteed () -> () // users: %5, %8, %4
  yield %3 : $*@callee_guaranteed () -> (), resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*@callee_guaranteed () -> ()   // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*@callee_guaranteed () -> ()   // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo9ComputedAC12reabstractedyycvM'

// ComputedA.deinit
sil hidden @$s3foo9ComputedACfd : $@convention(method) (@guaranteed ComputedA) -> @owned Builtin.NativeObject {
// %0                                             // users: %6, %2, %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $ComputedA, #ComputedA.reabstracted // user: %3
  %3 = begin_access [deinit] [static] %2 : $*@callee_guaranteed () -> () // users: %5, %4
  destroy_addr %3 : $*@callee_guaranteed () -> () // id: %4
  end_access %3 : $*@callee_guaranteed () -> ()   // id: %5
  %6 = unchecked_ref_cast %0 : $ComputedA to $Builtin.NativeObject // user: %7
  return %6 : $Builtin.NativeObject               // id: %7
} // end sil function '$s3foo9ComputedACfd'

// ComputedA.__deallocating_deinit
sil hidden @$s3foo9ComputedACfD : $@convention(method) (@owned ComputedA) -> () {
// %0                                             // users: %3, %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  // function_ref ComputedA.deinit
  %2 = function_ref @$s3foo9ComputedACfd : $@convention(method) (@guaranteed ComputedA) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed ComputedA) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $ComputedA // user: %5
  dealloc_ref %4 : $ComputedA                     // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s3foo9ComputedACfD'

// ComputedA.__allocating_init()
sil hidden [exact_self_class] @$s3foo9ComputedACACycfC : $@convention(method) (@thick ComputedA.Type) -> @owned ComputedA {
bb0(%0 : $@thick ComputedA.Type):
  %1 = alloc_ref $ComputedA                       // user: %3
  // function_ref ComputedA.init()
  %2 = function_ref @$s3foo9ComputedACACycfc : $@convention(method) (@owned ComputedA) -> @owned ComputedA // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned ComputedA) -> @owned ComputedA // user: %4
  return %3 : $ComputedA                          // id: %4
} // end sil function '$s3foo9ComputedACACycfC'

// ComputedA.init()
sil hidden @$s3foo9ComputedACACycfc : $@convention(method) (@owned ComputedA) -> @owned ComputedA {
// %0                                             // users: %9, %5, %1
bb0(%0 : $ComputedA):
  debug_value %0 : $ComputedA, let, name "self", argno 1 // id: %1
  // function_ref closure #1 in variable initialization expression of ComputedA.reabstracted
  %2 = function_ref @$s3foo9ComputedAC12reabstractedyycvpfiyycfU_ : $@convention(thin) () -> () // user: %4
  // function_ref thunk for @escaping @convention(thin) () -> ()
  %3 = function_ref @$sIet_Ieg_TR : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %4
  %4 = partial_apply [callee_guaranteed] %3(%2) : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %7
  %5 = ref_element_addr %0 : $ComputedA, #ComputedA.reabstracted // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*@callee_guaranteed () -> () // users: %7, %8
  store %4 to %6 : $*@callee_guaranteed () -> ()  // id: %7
  end_access %6 : $*@callee_guaranteed () -> ()   // id: %8
  return %0 : $ComputedA                          // id: %9
} // end sil function '$s3foo9ComputedACACycfc'

// ComputedB.readOnly.getter
sil hidden @$s3foo9ComputedBV8readOnlyAA0B1ACvg : $@convention(method) (@guaranteed ComputedB) -> @owned ComputedA {
// %0                                             // user: %1
bb0(%0 : $ComputedB):
  debug_value %0 : $ComputedB, let, name "self", argno 1 // id: %1
  %2 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %4
  %3 = integer_literal $Builtin.Word, 60          // user: %8
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %8
  br bb1                                          // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int8, 2           // user: %8
  br bb2                                          // id: %7

bb2:                                              // Preds: bb1
  %8 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %6 : $Builtin.Int8) // user: %27
  %9 = integer_literal $Builtin.Int32, 81         // user: %10
  %10 = struct $UInt (%9 : $Builtin.Int32)        // user: %27
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %11 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %13
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %12 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %13
  %13 = partial_apply [callee_guaranteed] %12(%11) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %15, %14
  strong_retain %13 : $@callee_guaranteed () -> @owned String // id: %14
  %15 = convert_escape_to_noescape %13 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %21
  %16 = string_literal utf8 "Fatal error"         // user: %18
  %17 = integer_literal $Builtin.Word, 11         // user: %20
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %19 = integer_literal $Builtin.Int8, 2          // user: %20
  %20 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %19 : $Builtin.Int8) // user: %27
  %21 = apply %15() : $@noescape @callee_guaranteed () -> @owned String // user: %27
  br bb3                                          // id: %22

bb3:                                              // Preds: bb2
  %23 = integer_literal $Builtin.Int32, 1         // user: %24
  %24 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %27
  br bb4                                          // id: %25

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %26 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %27
  %27 = apply %26(%20, %21, %8, %10, %24) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %28
} // end sil function '$s3foo9ComputedBV8readOnlyAA0B1ACvg'

// ComputedB.mutating.getter
sil hidden @$s3foo9ComputedBV8mutatingAA0B1ACvg : $@convention(method) (@guaranteed ComputedB) -> @owned ComputedA {
// %0                                             // user: %1
bb0(%0 : $ComputedB):
  debug_value %0 : $ComputedB, let, name "self", argno 1 // id: %1
  %2 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %4
  %3 = integer_literal $Builtin.Word, 60          // user: %8
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %8
  br bb1                                          // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int8, 2           // user: %8
  br bb2                                          // id: %7

bb2:                                              // Preds: bb1
  %8 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %6 : $Builtin.Int8) // user: %27
  %9 = integer_literal $Builtin.Int32, 83         // user: %10
  %10 = struct $UInt (%9 : $Builtin.Int32)        // user: %27
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %11 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %13
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %12 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %13
  %13 = partial_apply [callee_guaranteed] %12(%11) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %15, %14
  strong_retain %13 : $@callee_guaranteed () -> @owned String // id: %14
  %15 = convert_escape_to_noescape %13 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %21
  %16 = string_literal utf8 "Fatal error"         // user: %18
  %17 = integer_literal $Builtin.Word, 11         // user: %20
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %19 = integer_literal $Builtin.Int8, 2          // user: %20
  %20 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %19 : $Builtin.Int8) // user: %27
  %21 = apply %15() : $@noescape @callee_guaranteed () -> @owned String // user: %27
  br bb3                                          // id: %22

bb3:                                              // Preds: bb2
  %23 = integer_literal $Builtin.Int32, 1         // user: %24
  %24 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %27
  br bb4                                          // id: %25

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %26 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %27
  %27 = apply %26(%20, %21, %8, %10, %24) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %28
} // end sil function '$s3foo9ComputedBV8mutatingAA0B1ACvg'

// ComputedB.mutating.setter
sil hidden @$s3foo9ComputedBV8mutatingAA0B1ACvs : $@convention(method) (@owned ComputedA, @inout ComputedB) -> () {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $ComputedA, %1 : $*ComputedB):
  debug_value %0 : $ComputedA, let, name "newValue", argno 1 // id: %2
  debug_value_addr %1 : $*ComputedB, var, name "self", argno 2 // id: %3
  %4 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %6
  %5 = integer_literal $Builtin.Word, 60          // user: %10
  %6 = builtin "ptrtoint_Word"(%4 : $Builtin.RawPointer) : $Builtin.Word // user: %10
  br bb1                                          // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int8, 2           // user: %10
  br bb2                                          // id: %9

bb2:                                              // Preds: bb1
  %10 = struct $StaticString (%6 : $Builtin.Word, %5 : $Builtin.Word, %8 : $Builtin.Int8) // user: %29
  %11 = integer_literal $Builtin.Int32, 84        // user: %12
  %12 = struct $UInt (%11 : $Builtin.Int32)       // user: %29
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %13 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %15
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %14 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %15
  %15 = partial_apply [callee_guaranteed] %14(%13) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %17, %16
  strong_retain %15 : $@callee_guaranteed () -> @owned String // id: %16
  %17 = convert_escape_to_noescape %15 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %23
  %18 = string_literal utf8 "Fatal error"         // user: %20
  %19 = integer_literal $Builtin.Word, 11         // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %22
  %21 = integer_literal $Builtin.Int8, 2          // user: %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8) // user: %29
  %23 = apply %17() : $@noescape @callee_guaranteed () -> @owned String // user: %29
  br bb3                                          // id: %24

bb3:                                              // Preds: bb2
  %25 = integer_literal $Builtin.Int32, 1         // user: %26
  %26 = struct $UInt32 (%25 : $Builtin.Int32)     // user: %29
  br bb4                                          // id: %27

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %28 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %29
  %29 = apply %28(%22, %23, %10, %12, %26) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %30
} // end sil function '$s3foo9ComputedBV8mutatingAA0B1ACvs'

// ComputedB.mutating.modify
sil hidden [transparent] @$s3foo9ComputedBV8mutatingAA0B1ACvM : $@yield_once @convention(method) (@inout ComputedB) -> @yields @inout ComputedA {
// %0                                             // users: %2, %1
bb0(%0 : $*ComputedB):
  debug_value_addr %0 : $*ComputedB, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*ComputedB // users: %4, %12, %11, %22, %19
  %3 = alloc_stack $ComputedA                     // users: %16, %9, %7, %13, %21, %20, %8
  %4 = load %2 : $*ComputedB                      // user: %6
  // function_ref ComputedB.mutating.getter
  %5 = function_ref @$s3foo9ComputedBV8mutatingAA0B1ACvg : $@convention(method) (@guaranteed ComputedB) -> @owned ComputedA // user: %6
  %6 = apply %5(%4) : $@convention(method) (@guaranteed ComputedB) -> @owned ComputedA // user: %7
  store %6 to %3 : $*ComputedA                    // id: %7
  yield %3 : $*ComputedA, resume bb1, unwind bb2  // id: %8

bb1:                                              // Preds: bb0
  %9 = load %3 : $*ComputedA                      // user: %11
  // function_ref ComputedB.mutating.setter
  %10 = function_ref @$s3foo9ComputedBV8mutatingAA0B1ACvs : $@convention(method) (@owned ComputedA, @inout ComputedB) -> () // user: %11
  %11 = apply %10(%9, %2) : $@convention(method) (@owned ComputedA, @inout ComputedB) -> ()
  end_access %2 : $*ComputedB                     // id: %12
  dealloc_stack %3 : $*ComputedA                  // id: %13
  %14 = tuple ()                                  // user: %15
  return %14 : $()                                // id: %15

bb2:                                              // Preds: bb0
  %16 = load %3 : $*ComputedA                     // users: %19, %17
  strong_retain %16 : $ComputedA                  // id: %17
  // function_ref ComputedB.mutating.setter
  %18 = function_ref @$s3foo9ComputedBV8mutatingAA0B1ACvs : $@convention(method) (@owned ComputedA, @inout ComputedB) -> () // user: %19
  %19 = apply %18(%16, %2) : $@convention(method) (@owned ComputedA, @inout ComputedB) -> ()
  destroy_addr %3 : $*ComputedA                   // id: %20
  dealloc_stack %3 : $*ComputedA                  // id: %21
  end_access %2 : $*ComputedB                     // id: %22
  unwind                                          // id: %23
} // end sil function '$s3foo9ComputedBV8mutatingAA0B1ACvM'

// ComputedB.nonmutating.getter
sil hidden @$s3foo9ComputedBV11nonmutatingAA0B1ACvg : $@convention(method) (@guaranteed ComputedB) -> @owned ComputedA {
// %0                                             // user: %1
bb0(%0 : $ComputedB):
  debug_value %0 : $ComputedB, let, name "self", argno 1 // id: %1
  %2 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %4
  %3 = integer_literal $Builtin.Word, 60          // user: %8
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %8
  br bb1                                          // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int8, 2           // user: %8
  br bb2                                          // id: %7

bb2:                                              // Preds: bb1
  %8 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %6 : $Builtin.Int8) // user: %27
  %9 = integer_literal $Builtin.Int32, 87         // user: %10
  %10 = struct $UInt (%9 : $Builtin.Int32)        // user: %27
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %11 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %13
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %12 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %13
  %13 = partial_apply [callee_guaranteed] %12(%11) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %15, %14
  strong_retain %13 : $@callee_guaranteed () -> @owned String // id: %14
  %15 = convert_escape_to_noescape %13 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %21
  %16 = string_literal utf8 "Fatal error"         // user: %18
  %17 = integer_literal $Builtin.Word, 11         // user: %20
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %19 = integer_literal $Builtin.Int8, 2          // user: %20
  %20 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %19 : $Builtin.Int8) // user: %27
  %21 = apply %15() : $@noescape @callee_guaranteed () -> @owned String // user: %27
  br bb3                                          // id: %22

bb3:                                              // Preds: bb2
  %23 = integer_literal $Builtin.Int32, 1         // user: %24
  %24 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %27
  br bb4                                          // id: %25

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %26 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %27
  %27 = apply %26(%20, %21, %8, %10, %24) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %28
} // end sil function '$s3foo9ComputedBV11nonmutatingAA0B1ACvg'

// ComputedB.nonmutating.setter
sil hidden @$s3foo9ComputedBV11nonmutatingAA0B1ACvs : $@convention(method) (@owned ComputedA, @guaranteed ComputedB) -> () {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $ComputedA, %1 : $ComputedB):
  debug_value %0 : $ComputedA, let, name "newValue", argno 1 // id: %2
  debug_value %1 : $ComputedB, let, name "self", argno 2 // id: %3
  %4 = string_literal utf8 "/home/katei/swiftwasm-source/swift/test/stdlib/KeyPath.swift" // user: %6
  %5 = integer_literal $Builtin.Word, 60          // user: %10
  %6 = builtin "ptrtoint_Word"(%4 : $Builtin.RawPointer) : $Builtin.Word // user: %10
  br bb1                                          // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int8, 2           // user: %10
  br bb2                                          // id: %9

bb2:                                              // Preds: bb1
  %10 = struct $StaticString (%6 : $Builtin.Word, %5 : $Builtin.Word, %8 : $Builtin.Int8) // user: %29
  %11 = integer_literal $Builtin.Int32, 88        // user: %12
  %12 = struct $UInt (%11 : $Builtin.Int32)       // user: %29
  // function_ref implicit closure #1 in default argument 0 of fatalError(_:file:line:)
  %13 = function_ref @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String // user: %15
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %14 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %15
  %15 = partial_apply [callee_guaranteed] %14(%13) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // users: %17, %16
  strong_retain %15 : $@callee_guaranteed () -> @owned String // id: %16
  %17 = convert_escape_to_noescape %15 : $@callee_guaranteed () -> @owned String to $@noescape @callee_guaranteed () -> @owned String // user: %23
  %18 = string_literal utf8 "Fatal error"         // user: %20
  %19 = integer_literal $Builtin.Word, 11         // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %22
  %21 = integer_literal $Builtin.Int8, 2          // user: %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8) // user: %29
  %23 = apply %17() : $@noescape @callee_guaranteed () -> @owned String // user: %29
  br bb3                                          // id: %24

bb3:                                              // Preds: bb2
  %25 = integer_literal $Builtin.Int32, 1         // user: %26
  %26 = struct $UInt32 (%25 : $Builtin.Int32)     // user: %29
  br bb4                                          // id: %27

bb4:                                              // Preds: bb3
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %28 = function_ref @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never // user: %29
  %29 = apply %28(%22, %23, %10, %12, %26) : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %30
} // end sil function '$s3foo9ComputedBV11nonmutatingAA0B1ACvs'

// ComputedB.nonmutating.modify
sil hidden [transparent] @$s3foo9ComputedBV11nonmutatingAA0B1ACvM : $@yield_once @convention(method) (@guaranteed ComputedB) -> @yields @inout ComputedA {
// %0                                             // users: %9, %16, %4, %1
bb0(%0 : $ComputedB):
  debug_value %0 : $ComputedB, let, name "self", argno 1 // id: %1
  %2 = alloc_stack $ComputedA                     // users: %13, %7, %5, %10, %18, %17, %6
  // function_ref ComputedB.nonmutating.getter
  %3 = function_ref @$s3foo9ComputedBV11nonmutatingAA0B1ACvg : $@convention(method) (@guaranteed ComputedB) -> @owned ComputedA // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed ComputedB) -> @owned ComputedA // user: %5
  store %4 to %2 : $*ComputedA                    // id: %5
  yield %2 : $*ComputedA, resume bb1, unwind bb2  // id: %6

bb1:                                              // Preds: bb0
  %7 = load %2 : $*ComputedA                      // user: %9
  // function_ref ComputedB.nonmutating.setter
  %8 = function_ref @$s3foo9ComputedBV11nonmutatingAA0B1ACvs : $@convention(method) (@owned ComputedA, @guaranteed ComputedB) -> () // user: %9
  %9 = apply %8(%7, %0) : $@convention(method) (@owned ComputedA, @guaranteed ComputedB) -> ()
  dealloc_stack %2 : $*ComputedA                  // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12

bb2:                                              // Preds: bb0
  %13 = load %2 : $*ComputedA                     // users: %16, %14
  strong_retain %13 : $ComputedA                  // id: %14
  // function_ref ComputedB.nonmutating.setter
  %15 = function_ref @$s3foo9ComputedBV11nonmutatingAA0B1ACvs : $@convention(method) (@owned ComputedA, @guaranteed ComputedB) -> () // user: %16
  %16 = apply %15(%13, %0) : $@convention(method) (@owned ComputedA, @guaranteed ComputedB) -> ()
  destroy_addr %2 : $*ComputedA                   // id: %17
  dealloc_stack %2 : $*ComputedA                  // id: %18
  unwind                                          // id: %19
} // end sil function '$s3foo9ComputedBV11nonmutatingAA0B1ACvM'

// variable initialization expression of ComputedB.reabstracted
sil hidden [transparent] @$s3foo9ComputedBV12reabstractedyycvpfi : $@convention(thin) () -> @owned @callee_guaranteed () -> () {
bb0:
  // function_ref closure #1 in variable initialization expression of ComputedB.reabstracted
  %0 = function_ref @$s3foo9ComputedBV12reabstractedyycvpfiyycfU_ : $@convention(thin) () -> () // user: %2
  // function_ref thunk for @escaping @convention(thin) () -> ()
  %1 = function_ref @$sIet_Ieg_TR : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %2
  %2 = partial_apply [callee_guaranteed] %1(%0) : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %3
  return %2 : $@callee_guaranteed () -> ()        // id: %3
} // end sil function '$s3foo9ComputedBV12reabstractedyycvpfi'

// closure #1 in variable initialization expression of ComputedB.reabstracted
sil private @$s3foo9ComputedBV12reabstractedyycvpfiyycfU_ : $@convention(thin) () -> () {
bb0:
  %0 = tuple ()                                   // user: %1
  return %0 : $()                                 // id: %1
} // end sil function '$s3foo9ComputedBV12reabstractedyycvpfiyycfU_'

// ComputedB.reabstracted.getter
sil hidden [transparent] @$s3foo9ComputedBV12reabstractedyycvg : $@convention(method) (@guaranteed ComputedB) -> @owned @callee_guaranteed () -> () {
// %0                                             // users: %2, %1
bb0(%0 : $ComputedB):
  debug_value %0 : $ComputedB, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $ComputedB, #ComputedB.reabstracted // users: %4, %3
  strong_retain %2 : $@callee_guaranteed () -> () // id: %3
  return %2 : $@callee_guaranteed () -> ()        // id: %4
} // end sil function '$s3foo9ComputedBV12reabstractedyycvg'

// ComputedB.reabstracted.setter
sil hidden [transparent] @$s3foo9ComputedBV12reabstractedyycvs : $@convention(method) (@owned @callee_guaranteed () -> (), @inout ComputedB) -> () {
// %0                                             // users: %11, %8, %4, %2
// %1                                             // users: %5, %3
bb0(%0 : $@callee_guaranteed () -> (), %1 : $*ComputedB):
  debug_value %0 : $@callee_guaranteed () -> (), let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*ComputedB, var, name "self", argno 2 // id: %3
  strong_retain %0 : $@callee_guaranteed () -> () // id: %4
  %5 = begin_access [modify] [static] %1 : $*ComputedB // users: %10, %6
  %6 = struct_element_addr %5 : $*ComputedB, #ComputedB.reabstracted // users: %8, %7
  %7 = load %6 : $*@callee_guaranteed () -> ()    // user: %9
  store %0 to %6 : $*@callee_guaranteed () -> ()  // id: %8
  strong_release %7 : $@callee_guaranteed () -> () // id: %9
  end_access %5 : $*ComputedB                     // id: %10
  strong_release %0 : $@callee_guaranteed () -> () // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s3foo9ComputedBV12reabstractedyycvs'

// ComputedB.reabstracted.modify
sil hidden [transparent] @$s3foo9ComputedBV12reabstractedyycvM : $@yield_once @convention(method) (@inout ComputedB) -> @yields @inout @callee_guaranteed () -> () {
// %0                                             // users: %2, %1
bb0(%0 : $*ComputedB):
  debug_value_addr %0 : $*ComputedB, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*ComputedB // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*ComputedB, #ComputedB.reabstracted // user: %4
  yield %3 : $*@callee_guaranteed () -> (), resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*ComputedB                     // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*ComputedB                     // id: %8
  unwind                                          // id: %9
} // end sil function '$s3foo9ComputedBV12reabstractedyycvM'

// default argument 0 of ComputedB.init(reabstracted:)
sil hidden @$s3foo9ComputedBV12reabstractedACyyc_tcfcfA_ : $@convention(thin) () -> @owned @callee_guaranteed () -> () {
bb0:
  // function_ref closure #1 in variable initialization expression of ComputedB.reabstracted
  %0 = function_ref @$s3foo9ComputedBV12reabstractedyycvpfiyycfU_ : $@convention(thin) () -> () // user: %2
  // function_ref thunk for @escaping @convention(thin) () -> ()
  %1 = function_ref @$sIet_Ieg_TR : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %2
  %2 = partial_apply [callee_guaranteed] %1(%0) : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %3
  return %2 : $@callee_guaranteed () -> ()        // id: %3
} // end sil function '$s3foo9ComputedBV12reabstractedACyyc_tcfcfA_'

// ComputedB.init(reabstracted:)
sil hidden @$s3foo9ComputedBV12reabstractedACyyc_tcfC : $@convention(method) (@owned @callee_guaranteed () -> (), @thin ComputedB.Type) -> @owned ComputedB {
// %0                                             // user: %2
bb0(%0 : $@callee_guaranteed () -> (), %1 : $@thin ComputedB.Type):
  %2 = struct $ComputedB (%0 : $@callee_guaranteed () -> ()) // user: %3
  return %2 : $ComputedB                          // id: %3
} // end sil function '$s3foo9ComputedBV12reabstractedACyyc_tcfC'

// ComputedB.init()
sil hidden @$s3foo9ComputedBVACycfC : $@convention(method) (@thin ComputedB.Type) -> @owned ComputedB {
bb0(%0 : $@thin ComputedB.Type):
  %1 = alloc_stack $ComputedB, var, name "self"   // users: %5, %9, %10
  // function_ref closure #1 in variable initialization expression of ComputedB.reabstracted
  %2 = function_ref @$s3foo9ComputedBV12reabstractedyycvpfiyycfU_ : $@convention(thin) () -> () // user: %4
  // function_ref thunk for @escaping @convention(thin) () -> ()
  %3 = function_ref @$sIet_Ieg_TR : $@convention(thin) (@convention(thin) () -> ()) -> () // user: %4
  %4 = partial_apply [callee_guaranteed] %3(%2) : $@convention(thin) (@convention(thin) () -> ()) -> () // users: %7, %6
  %5 = struct_element_addr %1 : $*ComputedB, #ComputedB.reabstracted // user: %6
  store %4 to %5 : $*@callee_guaranteed () -> ()  // id: %6
  %7 = struct $ComputedB (%4 : $@callee_guaranteed () -> ()) // users: %11, %8
  retain_value %7 : $ComputedB                    // id: %8
  destroy_addr %1 : $*ComputedB                   // id: %9
  dealloc_stack %1 : $*ComputedB                  // id: %10
  return %7 : $ComputedB                          // id: %11
} // end sil function '$s3foo9ComputedBVACycfC'

// makeKeyPathInGenericContext<A>(of:)
sil hidden @$s3foo27makeKeyPathInGenericContext2ofs017ReferenceWritablecD0CyAA1CCyxGxGxm_tlF : $@convention(thin) <T> (@thick T.Type) -> @owned ReferenceWritableKeyPath<C<T>, T> {
// %0                                             // user: %1
bb0(%0 : $@thick T.Type):
  debug_value %0 : $@thick T.Type, let, name "of", argno 1 // id: %1
  %2 = keypath $ReferenceWritableKeyPath<C<T>, T>, <τ_0_0> (root $C<τ_0_0>; settable_property $τ_0_0,  id @$s3foo1CC8computedxvg : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0, getter @$s3foo1CC8computedxvplACyxGTK : $@convention(thin) <τ_0_0> (@in_guaranteed C<τ_0_0>, UnsafeRawPointer) -> @out τ_0_0, setter @$s3foo1CC8computedxvplACyxGTk : $@convention(thin) <τ_0_0> (@in_guaranteed τ_0_0, @in_guaranteed C<τ_0_0>, UnsafeRawPointer) -> ()) <T> // user: %3
  return %2 : $ReferenceWritableKeyPath<C<T>, T>  // id: %3
} // end sil function '$s3foo27makeKeyPathInGenericContext2ofs017ReferenceWritablecD0CyAA1CCyxGxGxm_tlF'

// key path getter for C.computed : <A>C<A>
sil shared [thunk] @$s3foo1CC8computedxvplACyxGTK : $@convention(thin) <T> (@in_guaranteed C<T>, UnsafeRawPointer) -> @out T {
// %0                                             // user: %9
// %1                                             // user: %4
bb0(%0 : $*T, %1 : $*C<T>, %2 : $UnsafeRawPointer):
  %3 = alloc_stack $C<T>                          // users: %5, %12, %4
  copy_addr %1 to [initialization] %3 : $*C<T>    // id: %4
  %5 = load %3 : $*C<T>                           // users: %11, %8
  %6 = alloc_stack $T                             // users: %10, %9, %8
  // function_ref C.computed.getter
  %7 = function_ref @$s3foo1CC8computedxvg : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0 // user: %8
  %8 = apply %7<T>(%6, %5) : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0
  copy_addr [take] %6 to [initialization] %0 : $*T // id: %9
  dealloc_stack %6 : $*T                          // id: %10
  strong_release %5 : $C<T>                       // id: %11
  dealloc_stack %3 : $*C<T>                       // id: %12
  %13 = tuple ()                                  // user: %14
  return %13 : $()                                // id: %14
} // end sil function '$s3foo1CC8computedxvplACyxGTK'

// key path setter for C.computed : <A>C<A>
sil shared [thunk] @$s3foo1CC8computedxvplACyxGTk : $@convention(thin) <T> (@in_guaranteed T, @in_guaranteed C<T>, UnsafeRawPointer) -> () {
// %0                                             // user: %4
// %1                                             // user: %6
bb0(%0 : $*T, %1 : $*C<T>, %2 : $UnsafeRawPointer):
  %3 = alloc_stack $T                             // users: %12, %9, %4
  copy_addr %0 to [initialization] %3 : $*T       // id: %4
  %5 = alloc_stack $C<T>                          // users: %7, %11, %6
  copy_addr %1 to [initialization] %5 : $*C<T>    // id: %6
  %7 = load %5 : $*C<T>                           // users: %10, %9
  // function_ref C.computed.setter
  %8 = function_ref @$s3foo1CC8computedxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> () // user: %9
  %9 = apply %8<T>(%3, %7) : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> ()
  strong_release %7 : $C<T>                       // id: %10
  dealloc_stack %5 : $*C<T>                       // id: %11
  dealloc_stack %3 : $*T                          // id: %12
  %13 = tuple ()                                  // user: %14
  return %13 : $()                                // id: %14
} // end sil function '$s3foo1CC8computedxvplACyxGTk'

// swift_getAtKeyPath
sil @swift_getAtKeyPath : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed KeyPath<τ_0_0, τ_0_1>) -> @out τ_0_1

// default argument 1 of expectTrue(_:_:stackTrace:showFrame:file:line:)
sil shared_external [serialized] @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_ : $@convention(thin) () -> @owned @callee_guaranteed () -> @owned String {
bb0:
  // function_ref implicit closure #1 in default argument 1 of expectTrue(_:_:stackTrace:showFrame:file:line:)
  %0 = function_ref @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_SSycfu_ : $@convention(thin) () -> @owned String // user: %2
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %1 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %2
  %2 = partial_apply [callee_guaranteed] %1(%0) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %3
  return %2 : $@callee_guaranteed () -> @owned String // id: %3
} // end sil function '$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_'

// default argument 2 of expectTrue(_:_:stackTrace:showFrame:file:line:)
sil shared_external [serialized] @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA1_ : $@convention(thin) () -> @out SourceLocStack {
// %0                                             // user: %3
bb0(%0 : $*SourceLocStack):
  %1 = metatype $@thin SourceLocStack.Type        // user: %3
  // function_ref SourceLocStack.init()
  %2 = function_ref @$s14StdlibUnittest14SourceLocStackVACycfC : $@convention(method) (@thin SourceLocStack.Type) -> @out SourceLocStack // user: %3
  %3 = apply %2(%0, %1) : $@convention(method) (@thin SourceLocStack.Type) -> @out SourceLocStack
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA1_'

// default argument 3 of expectTrue(_:_:stackTrace:showFrame:file:line:)
sil shared_external [serialized] @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA2_ : $@convention(thin) () -> Bool {
bb0:
  %0 = integer_literal $Builtin.Int1, -1          // user: %1
  %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
  return %1 : $Bool                               // id: %2
} // end sil function '$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA2_'

// expectTrue(_:_:stackTrace:showFrame:file:line:)
sil @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutF : $@convention(thin) (Bool, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()

// swift_setAtReferenceWritableKeyPath
sil @swift_setAtReferenceWritableKeyPath : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @guaranteed ReferenceWritableKeyPath<τ_0_0, τ_0_1>, @in τ_0_1) -> ()

// default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
sil shared_external [serialized] @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_ : $@convention(thin) <T where T : Equatable> () -> @owned @callee_guaranteed () -> @owned String {
bb0:
  // function_ref implicit closure #1 in default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
  %0 = function_ref @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_SSycfu_ : $@convention(thin) () -> @owned String // user: %2
  // function_ref thunk for @escaping @convention(thin) () -> (@owned String)
  %1 = function_ref @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %2
  %2 = partial_apply [callee_guaranteed] %1(%0) : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String // user: %3
  return %2 : $@callee_guaranteed () -> @owned String // id: %3
} // end sil function '$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_'

// default argument 3 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
sil shared_external [serialized] @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_ : $@convention(thin) <T where T : Equatable> () -> @out SourceLocStack {
// %0                                             // user: %3
bb0(%0 : $*SourceLocStack):
  %1 = metatype $@thin SourceLocStack.Type        // user: %3
  // function_ref SourceLocStack.init()
  %2 = function_ref @$s14StdlibUnittest14SourceLocStackVACycfC : $@convention(method) (@thin SourceLocStack.Type) -> @out SourceLocStack // user: %3
  %3 = apply %2(%0, %1) : $@convention(method) (@thin SourceLocStack.Type) -> @out SourceLocStack
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA2_'

// default argument 4 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
sil shared_external [serialized] @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_ : $@convention(thin) <T where T : Equatable> () -> Bool {
bb0:
  %0 = integer_literal $Builtin.Int1, -1          // user: %1
  %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
  return %1 : $Bool                               // id: %2
} // end sil function '$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA3_'

// expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
sil @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @noescape @callee_guaranteed () -> @owned String, @in_guaranteed SourceLocStack, Bool, @guaranteed String, UInt) -> ()

// AnyKeyPath.hashValue.getter
sil @$ss10AnyKeyPathC9hashValueSivg : $@convention(method) (@guaranteed AnyKeyPath) -> Int

// key path getter for C.computed : C<LifetimeTracked>
sil shared [thunk] @$s3foo1CC8computedxvpACy14StdlibUnittest15LifetimeTrackedCGTK : $@convention(thin) (@in_guaranteed C<LifetimeTracked>, UnsafeRawPointer, @in_guaranteed C<LifetimeTracked>) -> @out LifetimeTracked {
// %0                                             // user: %11
// %1                                             // user: %5
bb0(%0 : $*LifetimeTracked, %1 : $*C<LifetimeTracked>, %2 : $UnsafeRawPointer, %3 : $*C<LifetimeTracked>):
  %4 = alloc_stack $C<LifetimeTracked>            // users: %6, %14, %5
  copy_addr %1 to [initialization] %4 : $*C<LifetimeTracked> // id: %5
  %6 = load %4 : $*C<LifetimeTracked>             // users: %13, %9
  %7 = alloc_stack $LifetimeTracked               // users: %10, %12, %9
  // function_ref C.computed.getter
  %8 = function_ref @$s3foo1CC8computedxvg : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0 // user: %9
  %9 = apply %8<LifetimeTracked>(%7, %6) : $@convention(method) <τ_0_0> (@guaranteed C<τ_0_0>) -> @out τ_0_0
  %10 = load %7 : $*LifetimeTracked               // user: %11
  store %10 to %0 : $*LifetimeTracked             // id: %11
  dealloc_stack %7 : $*LifetimeTracked            // id: %12
  strong_release %6 : $C<LifetimeTracked>         // id: %13
  dealloc_stack %4 : $*C<LifetimeTracked>         // id: %14
  %15 = tuple ()                                  // user: %16
  return %15 : $()                                // id: %16
} // end sil function '$s3foo1CC8computedxvpACy14StdlibUnittest15LifetimeTrackedCGTK'

// key path setter for C.computed : C<LifetimeTracked>
sil shared [thunk] @$s3foo1CC8computedxvpACy14StdlibUnittest15LifetimeTrackedCGTk : $@convention(thin) (@in_guaranteed LifetimeTracked, @in_guaranteed C<LifetimeTracked>, UnsafeRawPointer, @in_guaranteed C<LifetimeTracked>) -> () {
// %0                                             // user: %5
// %1                                             // user: %8
bb0(%0 : $*LifetimeTracked, %1 : $*C<LifetimeTracked>, %2 : $UnsafeRawPointer, %3 : $*C<LifetimeTracked>):
  %4 = alloc_stack $LifetimeTracked               // users: %6, %17, %5
  copy_addr %0 to [initialization] %4 : $*LifetimeTracked // id: %5
  %6 = load %4 : $*LifetimeTracked                // user: %11
  %7 = alloc_stack $C<LifetimeTracked>            // users: %9, %16, %8
  copy_addr %1 to [initialization] %7 : $*C<LifetimeTracked> // id: %8
  %9 = load %7 : $*C<LifetimeTracked>             // users: %15, %13
  %10 = alloc_stack $LifetimeTracked              // users: %11, %14, %13
  store %6 to %10 : $*LifetimeTracked             // id: %11
  // function_ref C.computed.setter
  %12 = function_ref @$s3foo1CC8computedxvs : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> () // user: %13
  %13 = apply %12<LifetimeTracked>(%10, %9) : $@convention(method) <τ_0_0> (@in τ_0_0, @guaranteed C<τ_0_0>) -> ()
  dealloc_stack %10 : $*LifetimeTracked           // id: %14
  strong_release %9 : $C<LifetimeTracked>         // id: %15
  dealloc_stack %7 : $*C<LifetimeTracked>         // id: %16
  dealloc_stack %4 : $*LifetimeTracked            // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s3foo1CC8computedxvpACy14StdlibUnittest15LifetimeTrackedCGTk'

// LifetimeTracked.value.getter
sil @$s14StdlibUnittest15LifetimeTrackedC5valueSivg : $@convention(method) (@guaranteed LifetimeTracked) -> Int

// key path getter for LifetimeTracked.value : LifetimeTracked
sil shared [thunk] @$s14StdlibUnittest15LifetimeTrackedC5valueSivpACTK : $@convention(thin) (@in_guaranteed LifetimeTracked, UnsafeRawPointer, @in_guaranteed LifetimeTracked) -> @out Int {
// %0                                             // user: %9
// %1                                             // user: %5
bb0(%0 : $*Int, %1 : $*LifetimeTracked, %2 : $UnsafeRawPointer, %3 : $*LifetimeTracked):
  %4 = alloc_stack $LifetimeTracked               // users: %6, %11, %5
  copy_addr %1 to [initialization] %4 : $*LifetimeTracked // id: %5
  %6 = load %4 : $*LifetimeTracked                // users: %10, %8
  // function_ref LifetimeTracked.value.getter
  %7 = function_ref @$s14StdlibUnittest15LifetimeTrackedC5valueSivg : $@convention(method) (@guaranteed LifetimeTracked) -> Int // user: %8
  %8 = apply %7(%6) : $@convention(method) (@guaranteed LifetimeTracked) -> Int // user: %9
  store %8 to %0 : $*Int                          // id: %9
  strong_release %6 : $LifetimeTracked            // id: %10
  dealloc_stack %4 : $*LifetimeTracked            // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function '$s14StdlibUnittest15LifetimeTrackedC5valueSivpACTK'

// _AppendKeyPath.appending<A, B, C>(path:)
sil [serialized] @$ss14_AppendKeyPathPsE9appending4paths0bC0Cyqd__qd_1_GAFyqd_0_qd_1_G_tAFyqd__qd_0_GRbzr1_lF : $@convention(method) <τ_0_0><τ_1_0, τ_1_1, τ_1_2 where τ_0_0 : KeyPath<τ_1_0, τ_1_1>> (@guaranteed KeyPath<τ_1_1, τ_1_2>, @guaranteed τ_0_0) -> @owned KeyPath<τ_1_0, τ_1_2>

// protocol witness for FloatingPoint.init(sign:exponent:significand:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF4sign8exponent11significandxs17FloatingPointSignO_8ExponentQzxtcfCTW : $@convention(witness_method: FloatingPoint) (FloatingPointSign, @in Int, @in Double, @thick Double.Type) -> @out Double {
// %0                                             // user: %10
// %1                                             // user: %9
// %2                                             // user: %5
// %3                                             // user: %6
bb0(%0 : $*Double, %1 : $FloatingPointSign, %2 : $*Int, %3 : $*Double, %4 : $@thick Double.Type):
  %5 = load %2 : $*Int                            // user: %9
  %6 = load %3 : $*Double                         // user: %9
  %7 = metatype $@thin Double.Type                // user: %9
  // function_ref Double.init(sign:exponent:significand:)
  %8 = function_ref @$sSd4sign8exponent11significandSds17FloatingPointSignO_SiSdtcfC : $@convention(method) (FloatingPointSign, Int, Double, @thin Double.Type) -> Double // user: %9
  %9 = apply %8(%1, %5, %6, %7) : $@convention(method) (FloatingPointSign, Int, Double, @thin Double.Type) -> Double // user: %10
  store %9 to %0 : $*Double                       // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12
} // end sil function '$sSdSFsSF4sign8exponent11significandxs17FloatingPointSignO_8ExponentQzxtcfCTW'

// protocol witness for FloatingPoint.init(signOf:magnitudeOf:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF6signOf09magnitudeB0xx_xtcfCTW : $@convention(witness_method: FloatingPoint) (@in Double, @in Double, @thick Double.Type) -> @out Double {
// %0                                             // user: %9
// %1                                             // user: %4
// %2                                             // user: %5
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double, %3 : $@thick Double.Type):
  %4 = load %1 : $*Double                         // user: %8
  %5 = load %2 : $*Double                         // user: %8
  %6 = metatype $@thin Double.Type                // user: %8
  // function_ref Double.init(signOf:magnitudeOf:)
  %7 = function_ref @$sSd6signOf09magnitudeB0S2d_SdtcfC : $@convention(method) (Double, Double, @thin Double.Type) -> Double // user: %8
  %8 = apply %7(%4, %5, %6) : $@convention(method) (Double, Double, @thin Double.Type) -> Double // user: %9
  store %8 to %0 : $*Double                       // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$sSdSFsSF6signOf09magnitudeB0xx_xtcfCTW'

// protocol witness for FloatingPoint.init(_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSFyxSicfCTW : $@convention(witness_method: FloatingPoint) (Int, @thick Double.Type) -> @out Double {
// %0                                             // user: %6
// %1                                             // user: %5
bb0(%0 : $*Double, %1 : $Int, %2 : $@thick Double.Type):
  %3 = metatype $@thin Double.Type                // user: %5
  // function_ref Double.init(_:)
  %4 = function_ref @$sSdySdSicfC : $@convention(method) (Int, @thin Double.Type) -> Double // user: %5
  %5 = apply %4(%1, %3) : $@convention(method) (Int, @thin Double.Type) -> Double // user: %6
  store %5 to %0 : $*Double                       // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$sSdSFsSFyxSicfCTW'

// protocol witness for FloatingPoint.init<A>(_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSFyxqd__cSzRd__lufCTW : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick Double.Type) -> @out Double {
// %0                                             // user: %6
// %1                                             // user: %5
bb0(%0 : $*Double, %1 : $*τ_0_0, %2 : $@thick Double.Type):
  %3 = metatype $@thin Double.Type                // user: %5
  // function_ref Double.init<A>(_:)
  %4 = function_ref @$sSdySdxcSzRzlufC : $@convention(method) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thin Double.Type) -> Double // user: %5
  %5 = apply %4<τ_0_0>(%1, %3) : $@convention(method) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thin Double.Type) -> Double // user: %6
  store %5 to %0 : $*Double                       // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$sSdSFsSFyxqd__cSzRd__lufCTW'

// protocol witness for FloatingPoint.init<A>(exactly:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF7exactlyxSgqd___tcSzRd__lufCTW : $@convention(witness_method: FloatingPoint) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thick Double.Type) -> @out Optional<Double> {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Optional<Double>, %1 : $*τ_0_0, %2 : $@thick Double.Type):
  // function_ref BinaryFloatingPoint<>.init<A>(exactly:)
  %3 = function_ref @$sSBss17FixedWidthInteger14RawSignificandRpzrlE7exactlyxSgqd___tcSzRd__lufC : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint, τ_0_0.RawSignificand : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out Optional<τ_0_0> // user: %4
  %4 = apply %3<Double, τ_0_0>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint, τ_0_0.RawSignificand : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out Optional<τ_0_0>
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSdSFsSF7exactlyxSgqd___tcSzRd__lufCTW'

// protocol witness for static FloatingPoint.radix.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF5radixSivgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $@thick Double.Type):
  // function_ref static BinaryFloatingPoint.radix.getter
  %1 = function_ref @$sSBsE5radixSivgZ : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@thick τ_0_0.Type) -> Int // user: %2
  %2 = apply %1<Double>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@thick τ_0_0.Type) -> Int // user: %3
  return %2 : $Int                                // id: %3
} // end sil function '$sSdSFsSF5radixSivgZTW'

// protocol witness for static FloatingPoint.nan.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF3nanxvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.nan.getter
  %3 = function_ref @$sSd3nanSdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF3nanxvgZTW'

// protocol witness for static FloatingPoint.signalingNaN.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF12signalingNaNxvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.signalingNaN.getter
  %3 = function_ref @$sSd12signalingNaNSdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF12signalingNaNxvgZTW'

// protocol witness for static FloatingPoint.infinity.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF8infinityxvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.infinity.getter
  %3 = function_ref @$sSd8infinitySdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF8infinityxvgZTW'

// protocol witness for static FloatingPoint.greatestFiniteMagnitude.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF23greatestFiniteMagnitudexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.greatestFiniteMagnitude.getter
  %3 = function_ref @$sSd23greatestFiniteMagnitudeSdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF23greatestFiniteMagnitudexvgZTW'

// protocol witness for static FloatingPoint.pi.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF2pixvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.pi.getter
  %3 = function_ref @$sSd2piSdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF2pixvgZTW'

// protocol witness for FloatingPoint.ulp.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF3ulpxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %1 : $*Double                         // user: %4
  // function_ref Double.ulp.getter
  %3 = function_ref @$sSd3ulpSdvg : $@convention(method) (Double) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (Double) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF3ulpxvgTW'

// protocol witness for static FloatingPoint.ulpOfOne.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF8ulpOfOnexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.ulpOfOne.getter
  %3 = function_ref @$sSd8ulpOfOneSdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF8ulpOfOnexvgZTW'

// protocol witness for static FloatingPoint.leastNormalMagnitude.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF20leastNormalMagnitudexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.leastNormalMagnitude.getter
  %3 = function_ref @$sSd20leastNormalMagnitudeSdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF20leastNormalMagnitudexvgZTW'

// protocol witness for static FloatingPoint.leastNonzeroMagnitude.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF21leastNonzeroMagnitudexvgZTW : $@convention(witness_method: FloatingPoint) (@thick Double.Type) -> @out Double {
// %0                                             // user: %5
bb0(%0 : $*Double, %1 : $@thick Double.Type):
  %2 = metatype $@thin Double.Type                // user: %4
  // function_ref static Double.leastNonzeroMagnitude.getter
  %3 = function_ref @$sSd21leastNonzeroMagnitudeSdvgZ : $@convention(method) (@thin Double.Type) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thin Double.Type) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF21leastNonzeroMagnitudexvgZTW'

// protocol witness for FloatingPoint.sign.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF4signs17FloatingPointSignOvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> FloatingPointSign {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.sign.getter
  %2 = function_ref @$sSd4signs17FloatingPointSignOvg : $@convention(method) (Double) -> FloatingPointSign // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> FloatingPointSign // user: %4
  return %3 : $FloatingPointSign                  // id: %4
} // end sil function '$sSdSFsSF4signs17FloatingPointSignOvgTW'

// protocol witness for FloatingPoint.exponent.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF8exponent8ExponentQzvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> @out Int {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Int, %1 : $*Double):
  %2 = load %1 : $*Double                         // user: %4
  // function_ref Double.exponent.getter
  %3 = function_ref @$sSd8exponentSivg : $@convention(method) (Double) -> Int // user: %4
  %4 = apply %3(%2) : $@convention(method) (Double) -> Int // user: %5
  store %4 to %0 : $*Int                          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF8exponent8ExponentQzvgTW'

// protocol witness for FloatingPoint.significand.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF11significandxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %1 : $*Double                         // user: %4
  // function_ref Double.significand.getter
  %3 = function_ref @$sSd11significandSdvg : $@convention(method) (Double) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (Double) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF11significandxvgTW'

// protocol witness for static FloatingPoint./ infix(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF1doiyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double, @thick Double.Type) -> @out Double {
// %0                                             // user: %9
// %1                                             // user: %4
// %2                                             // user: %5
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double, %3 : $@thick Double.Type):
  %4 = load %1 : $*Double                         // user: %8
  %5 = load %2 : $*Double                         // user: %8
  %6 = metatype $@thin Double.Type                // user: %8
  // function_ref static Double./ infix(_:_:)
  %7 = function_ref @$sSd1doiyS2d_SdtFZ : $@convention(method) (Double, Double, @thin Double.Type) -> Double // user: %8
  %8 = apply %7(%4, %5, %6) : $@convention(method) (Double, Double, @thin Double.Type) -> Double // user: %9
  store %8 to %0 : $*Double                       // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$sSdSFsSF1doiyxx_xtFZTW'

// protocol witness for static FloatingPoint./= infix(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF2deoiyyxz_xtFZTW : $@convention(witness_method: FloatingPoint) (@inout Double, @in_guaranteed Double, @thick Double.Type) -> () {
// %0                                             // user: %6
// %1                                             // user: %3
bb0(%0 : $*Double, %1 : $*Double, %2 : $@thick Double.Type):
  %3 = load %1 : $*Double                         // user: %6
  %4 = metatype $@thin Double.Type                // user: %6
  // function_ref static Double./= infix(_:_:)
  %5 = function_ref @$sSd2deoiyySdz_SdtFZ : $@convention(method) (@inout Double, Double, @thin Double.Type) -> () // user: %6
  %6 = apply %5(%0, %3, %4) : $@convention(method) (@inout Double, Double, @thin Double.Type) -> ()
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$sSdSFsSF2deoiyyxz_xtFZTW'

// protocol witness for FloatingPoint.remainder(dividingBy:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF9remainder10dividingByxx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double) -> @out Double {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double):
  // function_ref FloatingPoint.remainder(dividingBy:)
  %3 = function_ref @$sSFsE9remainder10dividingByxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0 // user: %4
  %4 = apply %3<Double>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSdSFsSF9remainder10dividingByxx_tFTW'

// protocol witness for FloatingPoint.formRemainder(dividingBy:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF13formRemainder10dividingByyx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @inout Double) -> () {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %0 : $*Double                         // user: %4
  // function_ref Double.formRemainder(dividingBy:)
  %3 = function_ref @$sSd13formRemainder10dividingByySd_tF : $@convention(method) (Double, @inout Double) -> () // user: %4
  %4 = apply %3(%2, %1) : $@convention(method) (Double, @inout Double) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSdSFsSF13formRemainder10dividingByyx_tFTW'

// protocol witness for FloatingPoint.truncatingRemainder(dividingBy:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF19truncatingRemainder10dividingByxx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double) -> @out Double {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double):
  // function_ref FloatingPoint.truncatingRemainder(dividingBy:)
  %3 = function_ref @$sSFsE19truncatingRemainder10dividingByxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0 // user: %4
  %4 = apply %3<Double>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSdSFsSF19truncatingRemainder10dividingByxx_tFTW'

// protocol witness for FloatingPoint.formTruncatingRemainder(dividingBy:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF23formTruncatingRemainder10dividingByyx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @inout Double) -> () {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %0 : $*Double                         // user: %4
  // function_ref Double.formTruncatingRemainder(dividingBy:)
  %3 = function_ref @$sSd23formTruncatingRemainder10dividingByySd_tF : $@convention(method) (Double, @inout Double) -> () // user: %4
  %4 = apply %3(%2, %1) : $@convention(method) (Double, @inout Double) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSdSFsSF23formTruncatingRemainder10dividingByyx_tFTW'

// protocol witness for FloatingPoint.squareRoot() in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF10squareRootxyFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> @out Double {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $*Double, %1 : $*Double):
  // function_ref FloatingPoint.squareRoot()
  %2 = function_ref @$sSFsE10squareRootxyF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0 // user: %3
  %3 = apply %2<Double>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$sSdSFsSF10squareRootxyFTW'

// protocol witness for FloatingPoint.formSquareRoot() in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF14formSquareRootyyFTW : $@convention(witness_method: FloatingPoint) (@inout Double) -> () {
// %0                                             // user: %2
bb0(%0 : $*Double):
  // function_ref Double.formSquareRoot()
  %1 = function_ref @$sSd14formSquareRootyyF : $@convention(method) (@inout Double) -> () // user: %2
  %2 = apply %1(%0) : $@convention(method) (@inout Double) -> ()
  %3 = tuple ()                                   // user: %4
  return %3 : $()                                 // id: %4
} // end sil function '$sSdSFsSF14formSquareRootyyFTW'

// protocol witness for FloatingPoint.addingProduct(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF13addingProductyxx_xtFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double, @in_guaranteed Double) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %5
// %2                                             // user: %5
// %3                                             // user: %5
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double, %3 : $*Double):
  // function_ref FloatingPoint.addingProduct(_:_:)
  %4 = function_ref @$sSFsE13addingProductyxx_xtF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0 // user: %5
  %5 = apply %4<Double>(%0, %1, %2, %3) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF13addingProductyxx_xtFTW'

// protocol witness for FloatingPoint.addProduct(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF10addProductyyx_xtFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double, @inout Double) -> () {
// %0                                             // user: %3
// %1                                             // user: %4
// %2                                             // user: %6
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double):
  %3 = load %0 : $*Double                         // user: %6
  %4 = load %1 : $*Double                         // user: %6
  // function_ref Double.addProduct(_:_:)
  %5 = function_ref @$sSd10addProductyySd_SdtF : $@convention(method) (Double, Double, @inout Double) -> () // user: %6
  %6 = apply %5(%3, %4, %2) : $@convention(method) (Double, Double, @inout Double) -> ()
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$sSdSFsSF10addProductyyx_xtFTW'

// protocol witness for static FloatingPoint.minimum(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF7minimumyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double, @thick Double.Type) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %5
// %2                                             // user: %5
// %3                                             // user: %5
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double, %3 : $@thick Double.Type):
  // function_ref static FloatingPoint.minimum(_:_:)
  %4 = function_ref @$sSFsE7minimumyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %5
  %5 = apply %4<Double>(%0, %1, %2, %3) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF7minimumyxx_xtFZTW'

// protocol witness for static FloatingPoint.maximum(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF7maximumyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double, @thick Double.Type) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %5
// %2                                             // user: %5
// %3                                             // user: %5
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double, %3 : $@thick Double.Type):
  // function_ref static FloatingPoint.maximum(_:_:)
  %4 = function_ref @$sSFsE7maximumyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %5
  %5 = apply %4<Double>(%0, %1, %2, %3) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF7maximumyxx_xtFZTW'

// protocol witness for static FloatingPoint.minimumMagnitude(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF16minimumMagnitudeyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double, @thick Double.Type) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %5
// %2                                             // user: %5
// %3                                             // user: %5
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double, %3 : $@thick Double.Type):
  // function_ref static FloatingPoint.minimumMagnitude(_:_:)
  %4 = function_ref @$sSFsE16minimumMagnitudeyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %5
  %5 = apply %4<Double>(%0, %1, %2, %3) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF16minimumMagnitudeyxx_xtFZTW'

// protocol witness for static FloatingPoint.maximumMagnitude(_:_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF16maximumMagnitudeyxx_xtFZTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double, @thick Double.Type) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %5
// %2                                             // user: %5
// %3                                             // user: %5
bb0(%0 : $*Double, %1 : $*Double, %2 : $*Double, %3 : $@thick Double.Type):
  // function_ref static FloatingPoint.maximumMagnitude(_:_:)
  %4 = function_ref @$sSFsE16maximumMagnitudeyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %5
  %5 = apply %4<Double>(%0, %1, %2, %3) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF16maximumMagnitudeyxx_xtFZTW'

// protocol witness for FloatingPoint.rounded(_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF7roundedyxs25FloatingPointRoundingRuleOFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed FloatingPointRoundingRule, @in_guaranteed Double) -> @out Double {
// %0                                             // user: %4
// %1                                             // user: %4
// %2                                             // user: %4
bb0(%0 : $*Double, %1 : $*FloatingPointRoundingRule, %2 : $*Double):
  // function_ref FloatingPoint.rounded(_:)
  %3 = function_ref @$sSFsE7roundedyxs25FloatingPointRoundingRuleOF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed FloatingPointRoundingRule, @in_guaranteed τ_0_0) -> @out τ_0_0 // user: %4
  %4 = apply %3<Double>(%0, %1, %2) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed FloatingPointRoundingRule, @in_guaranteed τ_0_0) -> @out τ_0_0
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$sSdSFsSF7roundedyxs25FloatingPointRoundingRuleOFTW'

// protocol witness for FloatingPoint.round(_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF5roundyys25FloatingPointRoundingRuleOFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed FloatingPointRoundingRule, @inout Double) -> () {
// %0                                             // users: %7, %3
// %1                                             // users: %100, %95, %89, %84, %78, %73, %66, %61, %56, %51, %34, %28, %23, %17, %12, %5
bb0(%0 : $*FloatingPointRoundingRule, %1 : $*Double):
  %2 = alloc_stack $FloatingPointRoundingRule     // users: %104, %93, %82, %71, %32, %21, %10, %9, %4, %3
  copy_addr %0 to [initialization] %2 : $*FloatingPointRoundingRule // id: %3
  switch_enum_addr %2 : $*FloatingPointRoundingRule, case #FloatingPointRoundingRule.toNearestOrAwayFromZero!enumelt: bb12, case #FloatingPointRoundingRule.toNearestOrEven!enumelt: bb11, case #FloatingPointRoundingRule.towardZero!enumelt: bb10, case #FloatingPointRoundingRule.awayFromZero!enumelt: bb4, case #FloatingPointRoundingRule.up!enumelt: bb3, case #FloatingPointRoundingRule.down!enumelt: bb2, default bb1 // id: %4

bb1:                                              // Preds: bb0
  %5 = begin_access [modify] [static] %1 : $*Double // users: %8, %7
  // function_ref Double._roundSlowPath(_:)
  %6 = function_ref @$sSd14_roundSlowPathyys25FloatingPointRoundingRuleOF : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Double) -> () // user: %7
  %7 = apply %6(%0, %5) : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Double) -> ()
  end_access %5 : $*Double                        // id: %8
  destroy_addr %2 : $*FloatingPointRoundingRule   // id: %9
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %10
  br bb13                                         // id: %11

bb2:                                              // Preds: bb0
  %12 = begin_access [read] [static] %1 : $*Double // users: %15, %13
  %13 = struct_element_addr %12 : $*Double, #Double._value // user: %14
  %14 = load %13 : $*Builtin.FPIEEE64             // user: %16
  end_access %12 : $*Double                       // id: %15
  %16 = builtin "int_floor_FPIEEE64"(%14 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %19
  %17 = begin_access [modify] [static] %1 : $*Double // users: %20, %18
  %18 = struct_element_addr %17 : $*Double, #Double._value // user: %19
  store %16 to %18 : $*Builtin.FPIEEE64           // id: %19
  end_access %17 : $*Double                       // id: %20
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %21
  br bb13                                         // id: %22

bb3:                                              // Preds: bb0
  %23 = begin_access [read] [static] %1 : $*Double // users: %26, %24
  %24 = struct_element_addr %23 : $*Double, #Double._value // user: %25
  %25 = load %24 : $*Builtin.FPIEEE64             // user: %27
  end_access %23 : $*Double                       // id: %26
  %27 = builtin "int_ceil_FPIEEE64"(%25 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %30
  %28 = begin_access [modify] [static] %1 : $*Double // users: %31, %29
  %29 = struct_element_addr %28 : $*Double, #Double._value // user: %30
  store %27 to %29 : $*Builtin.FPIEEE64           // id: %30
  end_access %28 : $*Double                       // id: %31
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %32
  br bb13                                         // id: %33

bb4:                                              // Preds: bb0
  %34 = begin_access [read] [static] %1 : $*Double // users: %35, %36
  %35 = load %34 : $*Double                       // user: %38
  end_access %34 : $*Double                       // id: %36
  // function_ref Double.sign.getter
  %37 = function_ref @$sSd4signs17FloatingPointSignOvg : $@convention(method) (Double) -> FloatingPointSign // user: %38
  %38 = apply %37(%35) : $@convention(method) (Double) -> FloatingPointSign // user: %42
  %39 = metatype $@thin FloatingPointSign.Type
  %40 = enum $FloatingPointSign, #FloatingPointSign.minus!enumelt // user: %44
  // function_ref FloatingPointSign.rawValue.getter
  %41 = function_ref @$ss17FloatingPointSignO8rawValueSivg : $@convention(method) (FloatingPointSign) -> Int // user: %42
  %42 = apply %41(%38) : $@convention(method) (FloatingPointSign) -> Int // user: %45
  // function_ref FloatingPointSign.rawValue.getter
  %43 = function_ref @$ss17FloatingPointSignO8rawValueSivg : $@convention(method) (FloatingPointSign) -> Int // user: %44
  %44 = apply %43(%40) : $@convention(method) (FloatingPointSign) -> Int // user: %46
  %45 = struct_extract %42 : $Int, #Int._value    // user: %47
  %46 = struct_extract %44 : $Int, #Int._value    // user: %47
  %47 = builtin "cmp_eq_Int32"(%45 : $Builtin.Int32, %46 : $Builtin.Int32) : $Builtin.Int1 // user: %50
  br bb5                                          // id: %48

bb5:                                              // Preds: bb4
  br bb6                                          // id: %49

bb6:                                              // Preds: bb5
  cond_br %47, bb8, bb7                           // id: %50

bb7:                                              // Preds: bb6
  %51 = begin_access [read] [static] %1 : $*Double // users: %54, %52
  %52 = struct_element_addr %51 : $*Double, #Double._value // user: %53
  %53 = load %52 : $*Builtin.FPIEEE64             // user: %55
  end_access %51 : $*Double                       // id: %54
  %55 = builtin "int_ceil_FPIEEE64"(%53 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %58
  %56 = begin_access [modify] [static] %1 : $*Double // users: %59, %57
  %57 = struct_element_addr %56 : $*Double, #Double._value // user: %58
  store %55 to %57 : $*Builtin.FPIEEE64           // id: %58
  end_access %56 : $*Double                       // id: %59
  br bb9                                          // id: %60

bb8:                                              // Preds: bb6
  %61 = begin_access [read] [static] %1 : $*Double // users: %64, %62
  %62 = struct_element_addr %61 : $*Double, #Double._value // user: %63
  %63 = load %62 : $*Builtin.FPIEEE64             // user: %65
  end_access %61 : $*Double                       // id: %64
  %65 = builtin "int_floor_FPIEEE64"(%63 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %68
  %66 = begin_access [modify] [static] %1 : $*Double // users: %69, %67
  %67 = struct_element_addr %66 : $*Double, #Double._value // user: %68
  store %65 to %67 : $*Builtin.FPIEEE64           // id: %68
  end_access %66 : $*Double                       // id: %69
  br bb9                                          // id: %70

bb9:                                              // Preds: bb8 bb7
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %71
  br bb13                                         // id: %72

bb10:                                             // Preds: bb0
  %73 = begin_access [read] [static] %1 : $*Double // users: %76, %74
  %74 = struct_element_addr %73 : $*Double, #Double._value // user: %75
  %75 = load %74 : $*Builtin.FPIEEE64             // user: %77
  end_access %73 : $*Double                       // id: %76
  %77 = builtin "int_trunc_FPIEEE64"(%75 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %80
  %78 = begin_access [modify] [static] %1 : $*Double // users: %81, %79
  %79 = struct_element_addr %78 : $*Double, #Double._value // user: %80
  store %77 to %79 : $*Builtin.FPIEEE64           // id: %80
  end_access %78 : $*Double                       // id: %81
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %82
  br bb13                                         // id: %83

bb11:                                             // Preds: bb0
  %84 = begin_access [read] [static] %1 : $*Double // users: %87, %85
  %85 = struct_element_addr %84 : $*Double, #Double._value // user: %86
  %86 = load %85 : $*Builtin.FPIEEE64             // user: %88
  end_access %84 : $*Double                       // id: %87
  %88 = builtin "int_rint_FPIEEE64"(%86 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %91
  %89 = begin_access [modify] [static] %1 : $*Double // users: %92, %90
  %90 = struct_element_addr %89 : $*Double, #Double._value // user: %91
  store %88 to %90 : $*Builtin.FPIEEE64           // id: %91
  end_access %89 : $*Double                       // id: %92
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %93
  br bb13                                         // id: %94

bb12:                                             // Preds: bb0
  %95 = begin_access [read] [static] %1 : $*Double // users: %98, %96
  %96 = struct_element_addr %95 : $*Double, #Double._value // user: %97
  %97 = load %96 : $*Builtin.FPIEEE64             // user: %99
  end_access %95 : $*Double                       // id: %98
  %99 = builtin "int_round_FPIEEE64"(%97 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %102
  %100 = begin_access [modify] [static] %1 : $*Double // users: %103, %101
  %101 = struct_element_addr %100 : $*Double, #Double._value // user: %102
  store %99 to %101 : $*Builtin.FPIEEE64          // id: %102
  end_access %100 : $*Double                      // id: %103
  dealloc_stack %2 : $*FloatingPointRoundingRule  // id: %104
  br bb13                                         // id: %105

bb13:                                             // Preds: bb12 bb11 bb10 bb9 bb3 bb2 bb1
  br bb14                                         // id: %106

bb14:                                             // Preds: bb13
  %107 = tuple ()                                 // user: %108
  return %107 : $()                               // id: %108
} // end sil function '$sSdSFsSF5roundyys25FloatingPointRoundingRuleOFTW'

// protocol witness for FloatingPoint.nextUp.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF6nextUpxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> @out Double {
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %1 : $*Double                         // user: %4
  // function_ref Double.nextUp.getter
  %3 = function_ref @$sSd6nextUpSdvg : $@convention(method) (Double) -> Double // user: %4
  %4 = apply %3(%2) : $@convention(method) (Double) -> Double // user: %5
  store %4 to %0 : $*Double                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$sSdSFsSF6nextUpxvgTW'

// protocol witness for FloatingPoint.nextDown.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF8nextDownxvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> @out Double {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $*Double, %1 : $*Double):
  // function_ref FloatingPoint.nextDown.getter
  %2 = function_ref @$sSFsE8nextDownxvg : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0 // user: %3
  %3 = apply %2<Double>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$sSdSFsSF8nextDownxvgTW'

// protocol witness for FloatingPoint.isEqual(to:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF7isEqual2toSbx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %0 : $*Double                         // user: %5
  %3 = load %1 : $*Double                         // user: %4
  %4 = struct_extract %3 : $Double, #Double._value // user: %6
  %5 = struct_extract %2 : $Double, #Double._value // user: %6
  %6 = builtin "fcmp_oeq_FPIEEE64"(%4 : $Builtin.FPIEEE64, %5 : $Builtin.FPIEEE64) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %10
  br bb1                                          // id: %8

bb1:                                              // Preds: bb0
  br bb2                                          // id: %9

bb2:                                              // Preds: bb1
  return %7 : $Bool                               // id: %10
} // end sil function '$sSdSFsSF7isEqual2toSbx_tFTW'

// protocol witness for FloatingPoint.isLess(than:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF6isLess4thanSbx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %0 : $*Double                         // user: %5
  %3 = load %1 : $*Double                         // user: %4
  %4 = struct_extract %3 : $Double, #Double._value // user: %6
  %5 = struct_extract %2 : $Double, #Double._value // user: %6
  %6 = builtin "fcmp_olt_FPIEEE64"(%4 : $Builtin.FPIEEE64, %5 : $Builtin.FPIEEE64) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %10
  br bb1                                          // id: %8

bb1:                                              // Preds: bb0
  br bb2                                          // id: %9

bb2:                                              // Preds: bb1
  return %7 : $Bool                               // id: %10
} // end sil function '$sSdSFsSF6isLess4thanSbx_tFTW'

// protocol witness for FloatingPoint.isLessThanOrEqualTo(_:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF19isLessThanOrEqualToySbxFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*Double, %1 : $*Double):
  %2 = load %0 : $*Double                         // user: %5
  %3 = load %1 : $*Double                         // user: %5
  // function_ref Double.isLessThanOrEqualTo(_:)
  %4 = function_ref @$sSd19isLessThanOrEqualToySbSdF : $@convention(method) (Double, Double) -> Bool // user: %5
  %5 = apply %4(%2, %3) : $@convention(method) (Double, Double) -> Bool // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$sSdSFsSF19isLessThanOrEqualToySbxFTW'

// protocol witness for FloatingPoint.isTotallyOrdered(belowOrEqualTo:) in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF16isTotallyOrdered14belowOrEqualToSbx_tFTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double, @in_guaranteed Double) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $*Double, %1 : $*Double):
  // function_ref BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)
  %2 = function_ref @$sSBsE16isTotallyOrdered14belowOrEqualToSbx_tF : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool // user: %3
  %3 = apply %2<Double>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF16isTotallyOrdered14belowOrEqualToSbx_tFTW'

// protocol witness for FloatingPoint.isNormal.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF8isNormalSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isNormal.getter
  %2 = function_ref @$sSd8isNormalSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF8isNormalSbvgTW'

// protocol witness for FloatingPoint.isFinite.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF8isFiniteSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isFinite.getter
  %2 = function_ref @$sSd8isFiniteSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF8isFiniteSbvgTW'

// protocol witness for FloatingPoint.isZero.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF6isZeroSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isZero.getter
  %2 = function_ref @$sSd6isZeroSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF6isZeroSbvgTW'

// protocol witness for FloatingPoint.isSubnormal.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF11isSubnormalSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isSubnormal.getter
  %2 = function_ref @$sSd11isSubnormalSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF11isSubnormalSbvgTW'

// protocol witness for FloatingPoint.isInfinite.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF10isInfiniteSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isInfinite.getter
  %2 = function_ref @$sSd10isInfiniteSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF10isInfiniteSbvgTW'

// protocol witness for FloatingPoint.isNaN.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF5isNaNSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isNaN.getter
  %2 = function_ref @$sSd5isNaNSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF5isNaNSbvgTW'

// protocol witness for FloatingPoint.isSignalingNaN.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] [always_inline] @$sSdSFsSF14isSignalingNaNSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isSignalingNaN.getter
  %2 = function_ref @$sSd14isSignalingNaNSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF14isSignalingNaNSbvgTW'

// protocol witness for FloatingPoint.floatingPointClass.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF18floatingPointClasss08FloatingB14ClassificationOvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> FloatingPointClassification {
// %0                                             // user: %2
bb0(%0 : $*Double):
  // function_ref FloatingPoint.floatingPointClass.getter
  %1 = function_ref @$sSFsE18floatingPointClasss08FloatingB14ClassificationOvg : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> FloatingPointClassification // user: %2
  %2 = apply %1<Double>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> FloatingPointClassification // user: %3
  return %2 : $FloatingPointClassification        // id: %3
} // end sil function '$sSdSFsSF18floatingPointClasss08FloatingB14ClassificationOvgTW'

// protocol witness for FloatingPoint.isCanonical.getter in conformance Double
sil shared_external [transparent] [serialized] [thunk] @$sSdSFsSF11isCanonicalSbvgTW : $@convention(witness_method: FloatingPoint) (@in_guaranteed Double) -> Bool {
// %0                                             // user: %1
bb0(%0 : $*Double):
  %1 = load %0 : $*Double                         // user: %3
  // function_ref Double.isCanonical.getter
  %2 = function_ref @$sSd11isCanonicalSbvg : $@convention(method) (Double) -> Bool // user: %3
  %3 = apply %2(%1) : $@convention(method) (Double) -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$sSdSFsSF11isCanonicalSbvgTW'

// _assertionFailure(_:_:file:line:flags:)
sil [noinline] [_semantics "programtermination_point"] @$ss17_assertionFailure__4file4line5flagss5NeverOs12StaticStringV_SSAHSus6UInt32VtF : $@convention(thin) (StaticString, @guaranteed String, StaticString, UInt, UInt32) -> Never

// implicit closure #1 in default argument 0 of fatalError(_:file:line:)
sil shared_external [transparent] [serialized] @$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_ : $@convention(thin) () -> @owned String {
bb0:
  %0 = metatype $@thin String.Type                // user: %2
  // function_ref String.init()
  %1 = function_ref @$sS2SycfC : $@convention(method) (@thin String.Type) -> @owned String // user: %2
  %2 = apply %1(%0) : $@convention(method) (@thin String.Type) -> @owned String // user: %3
  return %2 : $String                             // id: %3
} // end sil function '$ss10fatalError_4file4lines5NeverOSSyXK_s12StaticStringVSutFfA_SSycfu_'

// thunk for @escaping @convention(thin) () -> (@owned String)
sil shared_external [transparent] [serializable] [reabstraction_thunk] @$sSSIeto_SSIego_TR : $@convention(thin) (@convention(thin) () -> @owned String) -> @owned String {
// %0                                             // user: %1
bb0(%0 : $@convention(thin) () -> @owned String):
  %1 = apply %0() : $@convention(thin) () -> @owned String // user: %2
  return %1 : $String                             // id: %2
} // end sil function '$sSSIeto_SSIego_TR'

// implicit closure #1 in default argument 1 of expectTrue(_:_:stackTrace:showFrame:file:line:)
sil shared_external [transparent] [serialized] @$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_SSycfu_ : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 ""                     // user: %5
  %1 = integer_literal $Builtin.Word, 0           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function '$s14StdlibUnittest10expectTrue__10stackTrace9showFrame4file4lineySb_SSyXKAA14SourceLocStackVSbSSSutFfA0_SSycfu_'

// SourceLocStack.init()
sil @$s14StdlibUnittest14SourceLocStackVACycfC : $@convention(method) (@thin SourceLocStack.Type) -> @out SourceLocStack

// implicit closure #1 in default argument 2 of expectEqual<A>(_:_:_:stackTrace:showFrame:file:line:)
sil shared_external [transparent] [serialized] @$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_SSycfu_ : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 ""                     // user: %5
  %1 = integer_literal $Builtin.Word, 0           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function '$s14StdlibUnittest11expectEqual___10stackTrace9showFrame4file4lineyx_xSSyXKAA14SourceLocStackVSbSSSutSQRzlFfA1_SSycfu_'

// String.init()
sil [serialized] [always_inline] [_semantics "string.init_empty"] @$sS2SycfC : $@convention(method) (@thin String.Type) -> @owned String

// Double.init(sign:exponent:significand:)
sil [serialized] @$sSd4sign8exponent11significandSds17FloatingPointSignO_SiSdtcfC : $@convention(method) (FloatingPointSign, Int, Double, @thin Double.Type) -> Double

// Double.init(signOf:magnitudeOf:)
sil [transparent] [serialized] @$sSd6signOf09magnitudeB0S2d_SdtcfC : $@convention(method) (Double, Double, @thin Double.Type) -> Double

// Double.init(_:)
sil [transparent] [serialized] @$sSdySdSicfC : $@convention(method) (Int, @thin Double.Type) -> Double

// Double.init<A>(_:)
sil [serialized] [always_inline] @$sSdySdxcSzRzlufC : $@convention(method) <τ_0_0 where τ_0_0 : BinaryInteger> (@in τ_0_0, @thin Double.Type) -> Double

// BinaryFloatingPoint<>.init<A>(exactly:)
sil [serialized] @$sSBss17FixedWidthInteger14RawSignificandRpzrlE7exactlyxSgqd___tcSzRd__lufC : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint, τ_0_0.RawSignificand : FixedWidthInteger><τ_1_0 where τ_1_0 : BinaryInteger> (@in τ_1_0, @thick τ_0_0.Type) -> @out Optional<τ_0_0>

// static BinaryFloatingPoint.radix.getter
sil [serialized] [always_inline] @$sSBsE5radixSivgZ : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@thick τ_0_0.Type) -> Int

// static Double.nan.getter
sil [serialized] @$sSd3nanSdvgZ : $@convention(method) (@thin Double.Type) -> Double

// static Double.signalingNaN.getter
sil [serialized] @$sSd12signalingNaNSdvgZ : $@convention(method) (@thin Double.Type) -> Double

// static Double.infinity.getter
sil [serialized] @$sSd8infinitySdvgZ : $@convention(method) (@thin Double.Type) -> Double

// static Double.greatestFiniteMagnitude.getter
sil [serialized] @$sSd23greatestFiniteMagnitudeSdvgZ : $@convention(method) (@thin Double.Type) -> Double

// static Double.pi.getter
sil [serialized] @$sSd2piSdvgZ : $@convention(method) (@thin Double.Type) -> Double

// Double.ulp.getter
sil [serialized] @$sSd3ulpSdvg : $@convention(method) (Double) -> Double

// static Double.ulpOfOne.getter
sil [serialized] @$sSd8ulpOfOneSdvgZ : $@convention(method) (@thin Double.Type) -> Double

// static Double.leastNormalMagnitude.getter
sil [serialized] @$sSd20leastNormalMagnitudeSdvgZ : $@convention(method) (@thin Double.Type) -> Double

// static Double.leastNonzeroMagnitude.getter
sil [serialized] @$sSd21leastNonzeroMagnitudeSdvgZ : $@convention(method) (@thin Double.Type) -> Double

// Double.sign.getter
sil [serialized] @$sSd4signs17FloatingPointSignOvg : $@convention(method) (Double) -> FloatingPointSign

// Double.exponent.getter
sil [serialized] @$sSd8exponentSivg : $@convention(method) (Double) -> Int

// Double.significand.getter
sil [serialized] @$sSd11significandSdvg : $@convention(method) (Double) -> Double

// static Double./ infix(_:_:)
sil [transparent] [serialized] @$sSd1doiyS2d_SdtFZ : $@convention(method) (Double, Double, @thin Double.Type) -> Double

// static Double./= infix(_:_:)
sil [transparent] [serialized] @$sSd2deoiyySdz_SdtFZ : $@convention(method) (@inout Double, Double, @thin Double.Type) -> ()

// FloatingPoint.remainder(dividingBy:)
sil [serialized] [always_inline] @$sSFsE9remainder10dividingByxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0

// Double.formRemainder(dividingBy:)
sil [serialized] [always_inline] @$sSd13formRemainder10dividingByySd_tF : $@convention(method) (Double, @inout Double) -> ()

// FloatingPoint.truncatingRemainder(dividingBy:)
sil [serialized] [always_inline] @$sSFsE19truncatingRemainder10dividingByxx_tF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0

// Double.formTruncatingRemainder(dividingBy:)
sil [serialized] [always_inline] @$sSd23formTruncatingRemainder10dividingByySd_tF : $@convention(method) (Double, @inout Double) -> ()

// FloatingPoint.squareRoot()
sil [transparent] [serialized] @$sSFsE10squareRootxyF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0

// Double.formSquareRoot()
sil [transparent] [serialized] @$sSd14formSquareRootyyF : $@convention(method) (@inout Double) -> ()

// FloatingPoint.addingProduct(_:_:)
sil [transparent] [serialized] @$sSFsE13addingProductyxx_xtF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> @out τ_0_0

// Double.addProduct(_:_:)
sil [transparent] [serialized] @$sSd10addProductyySd_SdtF : $@convention(method) (Double, Double, @inout Double) -> ()

// static FloatingPoint.minimum(_:_:)
sil [serialized] @$sSFsE7minimumyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0

// static FloatingPoint.maximum(_:_:)
sil [serialized] @$sSFsE7maximumyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0

// static FloatingPoint.minimumMagnitude(_:_:)
sil [serialized] @$sSFsE16minimumMagnitudeyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0

// static FloatingPoint.maximumMagnitude(_:_:)
sil [serialized] @$sSFsE16maximumMagnitudeyxx_xtFZ : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0

// FloatingPoint.rounded(_:)
sil [transparent] [serialized] @$sSFsE7roundedyxs25FloatingPointRoundingRuleOF : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed FloatingPointRoundingRule, @in_guaranteed τ_0_0) -> @out τ_0_0

// Double._roundSlowPath(_:)
sil @$sSd14_roundSlowPathyys25FloatingPointRoundingRuleOF : $@convention(method) (@in_guaranteed FloatingPointRoundingRule, @inout Double) -> ()

// FloatingPointSign.rawValue.getter
sil [serialized] @$ss17FloatingPointSignO8rawValueSivg : $@convention(method) (FloatingPointSign) -> Int

// Double.nextUp.getter
sil [serialized] @$sSd6nextUpSdvg : $@convention(method) (Double) -> Double

// FloatingPoint.nextDown.getter
sil [serialized] [always_inline] @$sSFsE8nextDownxvg : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> @out τ_0_0

// Double.isLessThanOrEqualTo(_:)
sil [transparent] [serialized] @$sSd19isLessThanOrEqualToySbSdF : $@convention(method) (Double, Double) -> Bool

// BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)
sil [serialized] @$sSBsE16isTotallyOrdered14belowOrEqualToSbx_tF : $@convention(method) <τ_0_0 where τ_0_0 : BinaryFloatingPoint> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0) -> Bool

// Double.isNormal.getter
sil [serialized] [always_inline] @$sSd8isNormalSbvg : $@convention(method) (Double) -> Bool

// Double.isFinite.getter
sil [serialized] [always_inline] @$sSd8isFiniteSbvg : $@convention(method) (Double) -> Bool

// Double.isZero.getter
sil [serialized] [always_inline] @$sSd6isZeroSbvg : $@convention(method) (Double) -> Bool

// Double.isSubnormal.getter
sil [serialized] [always_inline] @$sSd11isSubnormalSbvg : $@convention(method) (Double) -> Bool

// Double.isInfinite.getter
sil [serialized] [always_inline] @$sSd10isInfiniteSbvg : $@convention(method) (Double) -> Bool

// Double.isNaN.getter
sil [serialized] [always_inline] @$sSd5isNaNSbvg : $@convention(method) (Double) -> Bool

// Double.isSignalingNaN.getter
sil [serialized] [always_inline] @$sSd14isSignalingNaNSbvg : $@convention(method) (Double) -> Bool

// FloatingPoint.floatingPointClass.getter
sil [serialized] @$sSFsE18floatingPointClasss08FloatingB14ClassificationOvg : $@convention(method) <τ_0_0 where τ_0_0 : FloatingPoint> (@in_guaranteed τ_0_0) -> FloatingPointClassification

// Double.isCanonical.getter
sil [serialized] @$sSd11isCanonicalSbvg : $@convention(method) (Double) -> Bool

sil_vtable C {
  #C.init!allocator.1: <T> (C<T>.Type) -> (Int, LifetimeTracked?, T) -> C<T> : @$s3foo1CC1x1y1zACyxGSi_14StdlibUnittest15LifetimeTrackedCSgxtcfC	// C.__allocating_init(x:y:z:)
  #C.deinit!deallocator.1: @$s3foo1CCfD	// C.__deallocating_deinit
}

sil_vtable ComputedA {
  #ComputedA.init!allocator.1: (ComputedA.Type) -> () -> ComputedA : @$s3foo9ComputedACACycfC	// ComputedA.__allocating_init()
  #ComputedA.deinit!deallocator.1: @$s3foo9ComputedACfD	// ComputedA.__deallocating_deinit
}

sil_witness_table hidden Point: Equatable module foo {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s3foo5PointVSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance Point
}

sil_witness_table hidden <T where T : Equatable> S<T>: Equatable module foo {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s3foo1SVyxGSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance S<A>
}

sil_witness_table public_external [serialized] Double: FloatingPoint module Swift {
  base_protocol Hashable: Double: Hashable module Swift
  base_protocol SignedNumeric: Double: SignedNumeric module Swift
  base_protocol Strideable: Double: Strideable module Swift
  associated_type_protocol (Exponent: SignedInteger): Int: SignedInteger module Swift
  associated_type Exponent: Int
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint> (Self.Type) -> (FloatingPointSign, Self.Exponent, Self) -> Self : @$sSdSFsSF4sign8exponent11significandxs17FloatingPointSignO_8ExponentQzxtcfCTW	// protocol witness for FloatingPoint.init(sign:exponent:significand:) in conformance Double
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self : @$sSdSFsSF6signOf09magnitudeB0xx_xtcfCTW	// protocol witness for FloatingPoint.init(signOf:magnitudeOf:) in conformance Double
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint> (Self.Type) -> (Int) -> Self : @$sSdSFsSFyxSicfCTW	// protocol witness for FloatingPoint.init(_:) in conformance Double
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint><Source where Source : BinaryInteger> (Self.Type) -> (Source) -> Self : @$sSdSFsSFyxqd__cSzRd__lufCTW	// protocol witness for FloatingPoint.init<A>(_:) in conformance Double
  method #FloatingPoint.init!allocator.1: <Self where Self : FloatingPoint><Source where Source : BinaryInteger> (Self.Type) -> (Source) -> Self? : @$sSdSFsSF7exactlyxSgqd___tcSzRd__lufCTW	// protocol witness for FloatingPoint.init<A>(exactly:) in conformance Double
  method #FloatingPoint.radix!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Int : @$sSdSFsSF5radixSivgZTW	// protocol witness for static FloatingPoint.radix.getter in conformance Double
  method #FloatingPoint.nan!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF3nanxvgZTW	// protocol witness for static FloatingPoint.nan.getter in conformance Double
  method #FloatingPoint.signalingNaN!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF12signalingNaNxvgZTW	// protocol witness for static FloatingPoint.signalingNaN.getter in conformance Double
  method #FloatingPoint.infinity!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF8infinityxvgZTW	// protocol witness for static FloatingPoint.infinity.getter in conformance Double
  method #FloatingPoint.greatestFiniteMagnitude!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF23greatestFiniteMagnitudexvgZTW	// protocol witness for static FloatingPoint.greatestFiniteMagnitude.getter in conformance Double
  method #FloatingPoint.pi!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF2pixvgZTW	// protocol witness for static FloatingPoint.pi.getter in conformance Double
  method #FloatingPoint.ulp!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSdSFsSF3ulpxvgTW	// protocol witness for FloatingPoint.ulp.getter in conformance Double
  method #FloatingPoint.ulpOfOne!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF8ulpOfOnexvgZTW	// protocol witness for static FloatingPoint.ulpOfOne.getter in conformance Double
  method #FloatingPoint.leastNormalMagnitude!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF20leastNormalMagnitudexvgZTW	// protocol witness for static FloatingPoint.leastNormalMagnitude.getter in conformance Double
  method #FloatingPoint.leastNonzeroMagnitude!getter.1: <Self where Self : FloatingPoint> (Self.Type) -> () -> Self : @$sSdSFsSF21leastNonzeroMagnitudexvgZTW	// protocol witness for static FloatingPoint.leastNonzeroMagnitude.getter in conformance Double
  method #FloatingPoint.sign!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> FloatingPointSign : @$sSdSFsSF4signs17FloatingPointSignOvgTW	// protocol witness for FloatingPoint.sign.getter in conformance Double
  method #FloatingPoint.exponent!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self.Exponent : @$sSdSFsSF8exponent8ExponentQzvgTW	// protocol witness for FloatingPoint.exponent.getter in conformance Double
  method #FloatingPoint.significand!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSdSFsSF11significandxvgTW	// protocol witness for FloatingPoint.significand.getter in conformance Double
  method #FloatingPoint."/"!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self : @$sSdSFsSF1doiyxx_xtFZTW	// protocol witness for static FloatingPoint./ infix(_:_:) in conformance Double
  method #FloatingPoint."/="!1: <Self where Self : FloatingPoint> (Self.Type) -> (inout Self, Self) -> () : @$sSdSFsSF2deoiyyxz_xtFZTW	// protocol witness for static FloatingPoint./= infix(_:_:) in conformance Double
  method #FloatingPoint.remainder!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Self : @$sSdSFsSF9remainder10dividingByxx_tFTW	// protocol witness for FloatingPoint.remainder(dividingBy:) in conformance Double
  method #FloatingPoint.formRemainder!1: <Self where Self : FloatingPoint> (inout Self) -> (Self) -> () : @$sSdSFsSF13formRemainder10dividingByyx_tFTW	// protocol witness for FloatingPoint.formRemainder(dividingBy:) in conformance Double
  method #FloatingPoint.truncatingRemainder!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Self : @$sSdSFsSF19truncatingRemainder10dividingByxx_tFTW	// protocol witness for FloatingPoint.truncatingRemainder(dividingBy:) in conformance Double
  method #FloatingPoint.formTruncatingRemainder!1: <Self where Self : FloatingPoint> (inout Self) -> (Self) -> () : @$sSdSFsSF23formTruncatingRemainder10dividingByyx_tFTW	// protocol witness for FloatingPoint.formTruncatingRemainder(dividingBy:) in conformance Double
  method #FloatingPoint.squareRoot!1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSdSFsSF10squareRootxyFTW	// protocol witness for FloatingPoint.squareRoot() in conformance Double
  method #FloatingPoint.formSquareRoot!1: <Self where Self : FloatingPoint> (inout Self) -> () -> () : @$sSdSFsSF14formSquareRootyyFTW	// protocol witness for FloatingPoint.formSquareRoot() in conformance Double
  method #FloatingPoint.addingProduct!1: <Self where Self : FloatingPoint> (Self) -> (Self, Self) -> Self : @$sSdSFsSF13addingProductyxx_xtFTW	// protocol witness for FloatingPoint.addingProduct(_:_:) in conformance Double
  method #FloatingPoint.addProduct!1: <Self where Self : FloatingPoint> (inout Self) -> (Self, Self) -> () : @$sSdSFsSF10addProductyyx_xtFTW	// protocol witness for FloatingPoint.addProduct(_:_:) in conformance Double
  method #FloatingPoint.minimum!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self : @$sSdSFsSF7minimumyxx_xtFZTW	// protocol witness for static FloatingPoint.minimum(_:_:) in conformance Double
  method #FloatingPoint.maximum!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self : @$sSdSFsSF7maximumyxx_xtFZTW	// protocol witness for static FloatingPoint.maximum(_:_:) in conformance Double
  method #FloatingPoint.minimumMagnitude!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self : @$sSdSFsSF16minimumMagnitudeyxx_xtFZTW	// protocol witness for static FloatingPoint.minimumMagnitude(_:_:) in conformance Double
  method #FloatingPoint.maximumMagnitude!1: <Self where Self : FloatingPoint> (Self.Type) -> (Self, Self) -> Self : @$sSdSFsSF16maximumMagnitudeyxx_xtFZTW	// protocol witness for static FloatingPoint.maximumMagnitude(_:_:) in conformance Double
  method #FloatingPoint.rounded!1: <Self where Self : FloatingPoint> (Self) -> (FloatingPointRoundingRule) -> Self : @$sSdSFsSF7roundedyxs25FloatingPointRoundingRuleOFTW	// protocol witness for FloatingPoint.rounded(_:) in conformance Double
  method #FloatingPoint.round!1: <Self where Self : FloatingPoint> (inout Self) -> (FloatingPointRoundingRule) -> () : @$sSdSFsSF5roundyys25FloatingPointRoundingRuleOFTW	// protocol witness for FloatingPoint.round(_:) in conformance Double
  method #FloatingPoint.nextUp!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSdSFsSF6nextUpxvgTW	// protocol witness for FloatingPoint.nextUp.getter in conformance Double
  method #FloatingPoint.nextDown!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Self : @$sSdSFsSF8nextDownxvgTW	// protocol witness for FloatingPoint.nextDown.getter in conformance Double
  method #FloatingPoint.isEqual!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSdSFsSF7isEqual2toSbx_tFTW	// protocol witness for FloatingPoint.isEqual(to:) in conformance Double
  method #FloatingPoint.isLess!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSdSFsSF6isLess4thanSbx_tFTW	// protocol witness for FloatingPoint.isLess(than:) in conformance Double
  method #FloatingPoint.isLessThanOrEqualTo!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSdSFsSF19isLessThanOrEqualToySbxFTW	// protocol witness for FloatingPoint.isLessThanOrEqualTo(_:) in conformance Double
  method #FloatingPoint.isTotallyOrdered!1: <Self where Self : FloatingPoint> (Self) -> (Self) -> Bool : @$sSdSFsSF16isTotallyOrdered14belowOrEqualToSbx_tFTW	// protocol witness for FloatingPoint.isTotallyOrdered(belowOrEqualTo:) in conformance Double
  method #FloatingPoint.isNormal!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF8isNormalSbvgTW	// protocol witness for FloatingPoint.isNormal.getter in conformance Double
  method #FloatingPoint.isFinite!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF8isFiniteSbvgTW	// protocol witness for FloatingPoint.isFinite.getter in conformance Double
  method #FloatingPoint.isZero!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF6isZeroSbvgTW	// protocol witness for FloatingPoint.isZero.getter in conformance Double
  method #FloatingPoint.isSubnormal!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF11isSubnormalSbvgTW	// protocol witness for FloatingPoint.isSubnormal.getter in conformance Double
  method #FloatingPoint.isInfinite!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF10isInfiniteSbvgTW	// protocol witness for FloatingPoint.isInfinite.getter in conformance Double
  method #FloatingPoint.isNaN!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF5isNaNSbvgTW	// protocol witness for FloatingPoint.isNaN.getter in conformance Double
  method #FloatingPoint.isSignalingNaN!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF14isSignalingNaNSbvgTW	// protocol witness for FloatingPoint.isSignalingNaN.getter in conformance Double
  method #FloatingPoint.floatingPointClass!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> FloatingPointClassification : @$sSdSFsSF18floatingPointClasss08FloatingB14ClassificationOvgTW	// protocol witness for FloatingPoint.floatingPointClass.getter in conformance Double
  method #FloatingPoint.isCanonical!getter.1: <Self where Self : FloatingPoint> (Self) -> () -> Bool : @$sSdSFsSF11isCanonicalSbvgTW	// protocol witness for FloatingPoint.isCanonical.getter in conformance Double
}



